### YamlMime:ManagedReference
items:
- uid: Innovt.Core.Collections.Extensions
  commentId: T:Innovt.Core.Collections.Extensions
  id: Extensions
  parent: Innovt.Core.Collections
  children:
  - Innovt.Core.Collections.Extensions.AddFluent``1(System.Collections.Generic.IList{``0},``0)
  - Innovt.Core.Collections.Extensions.AddFluent``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  - Innovt.Core.Collections.Extensions.HasItems``1(System.Collections.Generic.ICollection{``0})
  - Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  - Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  - Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})
  - Innovt.Core.Collections.Extensions.MapToPagedCollection``2(Innovt.Core.Collections.IPagedCollection{``0})
  - Innovt.Core.Collections.Extensions.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: Innovt.Core.Collections.Extensions
  type: Class
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Extensions
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 17
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: A collection of extension methods for common operations on collections and objects.
  remarks: >-
    This static class provides extension methods to simplify common operations on collections,

    such as checking for null or empty, adding items, and merging dictionaries.
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})
  commentId: M:Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})
  id: IsNullOrEmpty``1(System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(IList<T>)
  nameWithType: Extensions.IsNullOrEmpty<T>(IList<T>)
  fullName: Innovt.Core.Collections.Extensions.IsNullOrEmpty<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IsNullOrEmpty
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 25
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Checks if an <xref href="System.Collections.Generic.IList%601" data-throw-if-not-resolved="false"></xref> is null or empty.
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this IList<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The <xref href="System.Collections.Generic.IList%601" data-throw-if-not-resolved="false"></xref> to check.
    typeParameters:
    - id: T
      description: The type of elements in the list.
    return:
      type: System.Boolean
      description: <code>true</code> if the list is null or empty; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsNullOrEmpty(Of T)(list As IList(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.IsNullOrEmpty*
  nameWithType.vb: Extensions.IsNullOrEmpty(Of T)(IList(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.IsNullOrEmpty(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: IsNullOrEmpty(Of T)(IList(Of T))
- uid: Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(IEnumerable<T>)
  nameWithType: Extensions.IsNullOrEmpty<T>(IEnumerable<T>)
  fullName: Innovt.Core.Collections.Extensions.IsNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IsNullOrEmpty
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 36
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Checks if an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> is null or empty.
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this IEnumerable<T> enumerable)
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    typeParameters:
    - id: T
      description: The type of elements in the enumerable.
    return:
      type: System.Boolean
      description: <code>true</code> if the enumerable is null or empty; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsNullOrEmpty(Of T)(enumerable As IEnumerable(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.IsNullOrEmpty*
  nameWithType.vb: Extensions.IsNullOrEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.IsNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNullOrEmpty(Of T)(IEnumerable(Of T))
- uid: Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Innovt.Core.Collections.Extensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  id: IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: Extensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: Innovt.Core.Collections.Extensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IsNullOrEmpty
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 47
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Checks if an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is null or empty.
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
      description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> to check.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    return:
      type: System.Boolean
      description: <code>true</code> if the collection is null or empty; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsNullOrEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.IsNullOrEmpty*
  nameWithType.vb: Extensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
- uid: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: IsNotNullOrEmpty<T>(IEnumerable<T>)
  nameWithType: Extensions.IsNotNullOrEmpty<T>(IEnumerable<T>)
  fullName: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IsNotNullOrEmpty
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 58
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Checks if an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> is not null and not empty.
  example: []
  syntax:
    content: public static bool IsNotNullOrEmpty<T>(this IEnumerable<T> enumerable)
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    typeParameters:
    - id: T
      description: The type of elements in the enumerable.
    return:
      type: System.Boolean
      description: <code>true</code> if the enumerable is not null and not empty; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsNotNullOrEmpty(Of T)(enumerable As IEnumerable(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty*
  nameWithType.vb: Extensions.IsNotNullOrEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNotNullOrEmpty(Of T)(IEnumerable(Of T))
- uid: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Innovt.Core.Collections.Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  id: IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: IsNotNullOrEmpty<T>(ICollection<T>)
  nameWithType: Extensions.IsNotNullOrEmpty<T>(ICollection<T>)
  fullName: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IsNotNullOrEmpty
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 70
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Checks if an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is not null and not empty.
  example: []
  syntax:
    content: public static bool IsNotNullOrEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
      description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> to check.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    return:
      type: System.Boolean
      description: <code>true</code> if the collection is not null and not empty; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsNotNullOrEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty*
  nameWithType.vb: Extensions.IsNotNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNotNullOrEmpty(Of T)(ICollection(Of T))
- uid: Innovt.Core.Collections.Extensions.HasItems``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Innovt.Core.Collections.Extensions.HasItems``1(System.Collections.Generic.ICollection{``0})
  id: HasItems``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: HasItems<T>(ICollection<T>)
  nameWithType: Extensions.HasItems<T>(ICollection<T>)
  fullName: Innovt.Core.Collections.Extensions.HasItems<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: HasItems
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 81
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Returns if the collection has more items
  example: []
  syntax:
    content: public static bool HasItems<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code> if the collection has more items; otherwise, <code>false</code>.
    content.vb: Public Shared Function HasItems(Of T)(collection As ICollection(Of T)) As Boolean
  overload: Innovt.Core.Collections.Extensions.HasItems*
  nameWithType.vb: Extensions.HasItems(Of T)(ICollection(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.HasItems(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: HasItems(Of T)(ICollection(Of T))
- uid: Innovt.Core.Collections.Extensions.AddFluent``1(System.Collections.Generic.IList{``0},``0)
  commentId: M:Innovt.Core.Collections.Extensions.AddFluent``1(System.Collections.Generic.IList{``0},``0)
  id: AddFluent``1(System.Collections.Generic.IList{``0},``0)
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: AddFluent<T>(IList<T>, T)
  nameWithType: Extensions.AddFluent<T>(IList<T>, T)
  fullName: Innovt.Core.Collections.Extensions.AddFluent<T>(System.Collections.Generic.IList<T>, T)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddFluent
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 97
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Initialize the collection if is null, so you don't have to check it
  example: []
  syntax:
    content: 'public static IList<T> AddFluent<T>(this IList<T> list, T value) where T : class'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: value
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IList{{T}}
      description: ''
    content.vb: Public Shared Function AddFluent(Of T As Class)(list As IList(Of T), value As T) As IList(Of T)
  overload: Innovt.Core.Collections.Extensions.AddFluent*
  nameWithType.vb: Extensions.AddFluent(Of T)(IList(Of T), T)
  fullName.vb: Innovt.Core.Collections.Extensions.AddFluent(Of T)(System.Collections.Generic.IList(Of T), T)
  name.vb: AddFluent(Of T)(IList(Of T), T)
- uid: Innovt.Core.Collections.Extensions.AddFluent``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:Innovt.Core.Collections.Extensions.AddFluent``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  id: AddFluent``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: AddFluent<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: Extensions.AddFluent<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: Innovt.Core.Collections.Extensions.AddFluent<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddFluent
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 114
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Adds a key-value pair to the dictionary and initializes it if it is null.
  example: []
  syntax:
    content: public static Dictionary<TKey, TValue> AddFluent<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue value)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> to add to.
    - id: key
      type: '{TKey}'
      description: The key to add to the dictionary.
    - id: value
      type: '{TValue}'
      description: The value to add to the dictionary.
    typeParameters:
    - id: TKey
      description: The type of keys in the dictionary.
    - id: TValue
      description: The type of values in the dictionary.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: Public Shared Function AddFluent(Of TKey, TValue)(dictionary As Dictionary(Of TKey, TValue), key As TKey, value As TValue) As Dictionary(Of TKey, TValue)
  overload: Innovt.Core.Collections.Extensions.AddFluent*
  nameWithType.vb: Extensions.AddFluent(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: Innovt.Core.Collections.Extensions.AddFluent(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: AddFluent(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
- uid: Innovt.Core.Collections.Extensions.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:Innovt.Core.Collections.Extensions.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})
  id: Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: Merge<TKey, TValue>(Dictionary<TKey, TValue>, Dictionary<TKey, TValue>)
  nameWithType: Extensions.Merge<TKey, TValue>(Dictionary<TKey, TValue>, Dictionary<TKey, TValue>)
  fullName: Innovt.Core.Collections.Extensions.Merge<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Merge
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 132
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Merges two dictionaries, adding values from the second dictionary to the first.
  example: []
  syntax:
    content: public static Dictionary<TKey, TValue> Merge<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, Dictionary<TKey, TValue> dictionarySecond)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The target <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> to merge into.
    - id: dictionarySecond
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The source dictionary to merge from.
    typeParameters:
    - id: TKey
      description: The type of keys in the dictionaries.
    - id: TValue
      description: The type of values in the dictionaries.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The updated dictionary after merging.
    content.vb: Public Shared Function Merge(Of TKey, TValue)(dictionary As Dictionary(Of TKey, TValue), dictionarySecond As Dictionary(Of TKey, TValue)) As Dictionary(Of TKey, TValue)
  overload: Innovt.Core.Collections.Extensions.Merge*
  nameWithType.vb: Extensions.Merge(Of TKey, TValue)(Dictionary(Of TKey, TValue), Dictionary(Of TKey, TValue))
  fullName.vb: Innovt.Core.Collections.Extensions.Merge(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: Merge(Of TKey, TValue)(Dictionary(Of TKey, TValue), Dictionary(Of TKey, TValue))
- uid: Innovt.Core.Collections.Extensions.MapToPagedCollection``2(Innovt.Core.Collections.IPagedCollection{``0})
  commentId: M:Innovt.Core.Collections.Extensions.MapToPagedCollection``2(Innovt.Core.Collections.IPagedCollection{``0})
  id: MapToPagedCollection``2(Innovt.Core.Collections.IPagedCollection{``0})
  isExtensionMethod: true
  parent: Innovt.Core.Collections.Extensions
  langs:
  - csharp
  - vb
  name: MapToPagedCollection<T, T2>(IPagedCollection<T>)
  nameWithType: Extensions.MapToPagedCollection<T, T2>(IPagedCollection<T>)
  fullName: Innovt.Core.Collections.Extensions.MapToPagedCollection<T, T2>(Innovt.Core.Collections.IPagedCollection<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Collections/Extensions.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: MapToPagedCollection
    path: ../src/Innovt.Core/Collections/Extensions.cs
    startLine: 151
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Collections
  summary: Using a simple mapper to map an page collection of objects to another page collection of objects
  example: []
  syntax:
    content: 'public static PagedCollection<T2> MapToPagedCollection<T, T2>(this IPagedCollection<T> pageCollection) where T : class where T2 : class'
    parameters:
    - id: pageCollection
      type: Innovt.Core.Collections.IPagedCollection{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: T2
      description: ''
    return:
      type: Innovt.Core.Collections.PagedCollection{{T2}}
      description: ''
    content.vb: Public Shared Function MapToPagedCollection(Of T As Class, T2 As Class)(pageCollection As IPagedCollection(Of T)) As PagedCollection(Of T2)
  overload: Innovt.Core.Collections.Extensions.MapToPagedCollection*
  nameWithType.vb: Extensions.MapToPagedCollection(Of T, T2)(IPagedCollection(Of T))
  fullName.vb: Innovt.Core.Collections.Extensions.MapToPagedCollection(Of T, T2)(Innovt.Core.Collections.IPagedCollection(Of T))
  name.vb: MapToPagedCollection(Of T, T2)(IPagedCollection(Of T))
references:
- uid: Innovt.Core.Collections
  commentId: N:Innovt.Core.Collections
  href: Innovt.html
  name: Innovt.Core.Collections
  nameWithType: Innovt.Core.Collections
  fullName: Innovt.Core.Collections
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Collections
    name: Collections
    href: Innovt.Core.Collections.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Collections
    name: Collections
    href: Innovt.Core.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Core.Collections.Extensions.IsNullOrEmpty*
  commentId: Overload:Innovt.Core.Collections.Extensions.IsNullOrEmpty
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_IsNullOrEmpty__1_System_Collections_Generic_IList___0__
  name: IsNullOrEmpty
  nameWithType: Extensions.IsNullOrEmpty
  fullName: Innovt.Core.Collections.Extensions.IsNullOrEmpty
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty*
  commentId: Overload:Innovt.Core.Collections.Extensions.IsNotNullOrEmpty
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_IsNotNullOrEmpty__1_System_Collections_Generic_IEnumerable___0__
  name: IsNotNullOrEmpty
  nameWithType: Extensions.IsNotNullOrEmpty
  fullName: Innovt.Core.Collections.Extensions.IsNotNullOrEmpty
- uid: Innovt.Core.Collections.Extensions.HasItems*
  commentId: Overload:Innovt.Core.Collections.Extensions.HasItems
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_HasItems__1_System_Collections_Generic_ICollection___0__
  name: HasItems
  nameWithType: Extensions.HasItems
  fullName: Innovt.Core.Collections.Extensions.HasItems
- uid: Innovt.Core.Collections.Extensions.AddFluent*
  commentId: Overload:Innovt.Core.Collections.Extensions.AddFluent
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_AddFluent__1_System_Collections_Generic_IList___0____0_
  name: AddFluent
  nameWithType: Extensions.AddFluent
  fullName: Innovt.Core.Collections.Extensions.AddFluent
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  commentId: '!:TKey'
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Innovt.Core.Collections.Extensions.Merge*
  commentId: Overload:Innovt.Core.Collections.Extensions.Merge
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_Merge__2_System_Collections_Generic_Dictionary___0___1__System_Collections_Generic_Dictionary___0___1__
  name: Merge
  nameWithType: Extensions.Merge
  fullName: Innovt.Core.Collections.Extensions.Merge
- uid: Innovt.Core.Collections.Extensions.MapToPagedCollection*
  commentId: Overload:Innovt.Core.Collections.Extensions.MapToPagedCollection
  href: Innovt.Core.Collections.Extensions.html#Innovt_Core_Collections_Extensions_MapToPagedCollection__2_Innovt_Core_Collections_IPagedCollection___0__
  name: MapToPagedCollection
  nameWithType: Extensions.MapToPagedCollection
  fullName: Innovt.Core.Collections.Extensions.MapToPagedCollection
- uid: Innovt.Core.Collections.IPagedCollection{{T}}
  commentId: T:Innovt.Core.Collections.IPagedCollection{``0}
  parent: Innovt.Core.Collections
  definition: Innovt.Core.Collections.IPagedCollection`1
  href: Innovt.Core.Collections.IPagedCollection-1.html
  name: IPagedCollection<T>
  nameWithType: IPagedCollection<T>
  fullName: Innovt.Core.Collections.IPagedCollection<T>
  nameWithType.vb: IPagedCollection(Of T)
  fullName.vb: Innovt.Core.Collections.IPagedCollection(Of T)
  name.vb: IPagedCollection(Of T)
  spec.csharp:
  - uid: Innovt.Core.Collections.IPagedCollection`1
    name: IPagedCollection
    href: Innovt.Core.Collections.IPagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.IPagedCollection`1
    name: IPagedCollection
    href: Innovt.Core.Collections.IPagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Core.Collections.PagedCollection{{T2}}
  commentId: T:Innovt.Core.Collections.PagedCollection{``1}
  parent: Innovt.Core.Collections
  definition: Innovt.Core.Collections.PagedCollection`1
  href: Innovt.Core.Collections.PagedCollection-1.html
  name: PagedCollection<T2>
  nameWithType: PagedCollection<T2>
  fullName: Innovt.Core.Collections.PagedCollection<T2>
  nameWithType.vb: PagedCollection(Of T2)
  fullName.vb: Innovt.Core.Collections.PagedCollection(Of T2)
  name.vb: PagedCollection(Of T2)
  spec.csharp:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T2
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: )
- uid: Innovt.Core.Collections.IPagedCollection`1
  commentId: T:Innovt.Core.Collections.IPagedCollection`1
  href: Innovt.Core.Collections.IPagedCollection-1.html
  name: IPagedCollection<T>
  nameWithType: IPagedCollection<T>
  fullName: Innovt.Core.Collections.IPagedCollection<T>
  nameWithType.vb: IPagedCollection(Of T)
  fullName.vb: Innovt.Core.Collections.IPagedCollection(Of T)
  name.vb: IPagedCollection(Of T)
  spec.csharp:
  - uid: Innovt.Core.Collections.IPagedCollection`1
    name: IPagedCollection
    href: Innovt.Core.Collections.IPagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.IPagedCollection`1
    name: IPagedCollection
    href: Innovt.Core.Collections.IPagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Core.Collections.PagedCollection`1
  commentId: T:Innovt.Core.Collections.PagedCollection`1
  href: Innovt.Core.Collections.PagedCollection-1.html
  name: PagedCollection<T>
  nameWithType: PagedCollection<T>
  fullName: Innovt.Core.Collections.PagedCollection<T>
  nameWithType.vb: PagedCollection(Of T)
  fullName.vb: Innovt.Core.Collections.PagedCollection(Of T)
  name.vb: PagedCollection(Of T)
  spec.csharp:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
