### YamlMime:ManagedReference
items:
- uid: Innovt.Cloud.Queue.IQueueService`1
  commentId: T:Innovt.Cloud.Queue.IQueueService`1
  id: IQueueService`1
  parent: Innovt.Cloud.Queue
  children:
  - Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync(System.Threading.CancellationToken)
  - Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync(System.Threading.CancellationToken)
  - Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync(System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync``1(``0,System.Nullable{System.Int32},System.Threading.CancellationToken)
  - Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync(System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest},System.Nullable{System.Int32},System.Threading.CancellationToken)
  - Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IQueueService<T>
  nameWithType: IQueueService<T>
  fullName: Innovt.Cloud.Queue.IQueueService<T>
  type: Interface
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IQueueService
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 14
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Defines the operations for interacting with a queue service for a specific type of queue messages.
  example: []
  syntax:
    content: 'public interface IQueueService<T> where T : IQueueMessage'
    typeParameters:
    - id: T
      description: The type of queue messages.
    content.vb: Public Interface IQueueService(Of T As IQueueMessage)
  extensionMethods:
  - System.Object.Innovt.Core.Utilities.Extensions.IsNull
  - System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  - System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  nameWithType.vb: IQueueService(Of T)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T)
  name.vb: IQueueService(Of T)
- uid: Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  id: GetMessagesAsync(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(int, int?, int?, CancellationToken)
  nameWithType: IQueueService<T>.GetMessagesAsync(int, int?, int?, CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.GetMessagesAsync(int, int?, int?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetMessagesAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 24
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Retrieves a list of messages from the queue asynchronously.
  example: []
  syntax:
    content: Task<IList<T>> GetMessagesAsync(int quantity, int? waitTimeInSeconds = null, int? visibilityTimeoutInSeconds = null, CancellationToken cancellationToken = default)
    parameters:
    - id: quantity
      type: System.Int32
      description: The number of messages to retrieve.
    - id: waitTimeInSeconds
      type: System.Nullable{System.Int32}
      description: The maximum time to wait for messages to become available.
    - id: visibilityTimeoutInSeconds
      type: System.Nullable{System.Int32}
      description: The duration for which retrieved messages are invisible to other consumers.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
      description: A list of retrieved messages.
    content.vb: Function GetMessagesAsync(quantity As Integer, waitTimeInSeconds As Integer? = Nothing, visibilityTimeoutInSeconds As Integer? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of T))
  overload: Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync*
  nameWithType.vb: IQueueService(Of T).GetMessagesAsync(Integer, Integer?, Integer?, CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).GetMessagesAsync(Integer, Integer?, Integer?, System.Threading.CancellationToken)
  name.vb: GetMessagesAsync(Integer, Integer?, Integer?, CancellationToken)
- uid: Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync(System.String,System.Threading.CancellationToken)
  id: DeQueueAsync(System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: DeQueueAsync(string, CancellationToken)
  nameWithType: IQueueService<T>.DeQueueAsync(string, CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.DeQueueAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeQueueAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 33
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Removes a message from the queue asynchronously.
  example: []
  syntax:
    content: Task DeQueueAsync(string popReceipt, CancellationToken cancellationToken = default)
    parameters:
    - id: popReceipt
      type: System.String
      description: The pop receipt of the message to be removed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Function DeQueueAsync(popReceipt As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync*
  nameWithType.vb: IQueueService(Of T).DeQueueAsync(String, CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).DeQueueAsync(String, System.Threading.CancellationToken)
  name.vb: DeQueueAsync(String, CancellationToken)
- uid: Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync``1(``0,System.Nullable{System.Int32},System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync``1(``0,System.Nullable{System.Int32},System.Threading.CancellationToken)
  id: EnQueueAsync``1(``0,System.Nullable{System.Int32},System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: EnQueueAsync<TK>(TK, int?, CancellationToken)
  nameWithType: IQueueService<T>.EnQueueAsync<TK>(TK, int?, CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.EnQueueAsync<TK>(TK, int?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: EnQueueAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 43
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Enqueues a message asynchronously.
  example: []
  syntax:
    content: Task<string> EnQueueAsync<TK>(TK message, int? visibilityTimeoutInSeconds = null, CancellationToken cancellationToken = default)
    parameters:
    - id: message
      type: '{TK}'
      description: The message to be enqueued.
    - id: visibilityTimeoutInSeconds
      type: System.Nullable{System.Int32}
      description: The duration for which the enqueued message is invisible to other consumers.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    typeParameters:
    - id: TK
      description: The type of the message to be enqueued.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The message ID associated with the enqueued message.
    content.vb: Function EnQueueAsync(Of TK)(message As TK, visibilityTimeoutInSeconds As Integer? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync*
  nameWithType.vb: IQueueService(Of T).EnQueueAsync(Of TK)(TK, Integer?, CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).EnQueueAsync(Of TK)(TK, Integer?, System.Threading.CancellationToken)
  name.vb: EnQueueAsync(Of TK)(TK, Integer?, CancellationToken)
- uid: Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync(System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest},System.Nullable{System.Int32},System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync(System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest},System.Nullable{System.Int32},System.Threading.CancellationToken)
  id: EnQueueBatchAsync(System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest},System.Nullable{System.Int32},System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: EnQueueBatchAsync(IEnumerable<MessageBatchRequest>, int?, CancellationToken)
  nameWithType: IQueueService<T>.EnQueueBatchAsync(IEnumerable<MessageBatchRequest>, int?, CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.EnQueueBatchAsync(System.Collections.Generic.IEnumerable<Innovt.Cloud.Queue.MessageBatchRequest>, int?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: EnQueueBatchAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 53
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Enqueues a batch of messages asynchronously.
  example: []
  syntax:
    content: Task<IList<MessageQueueResult>> EnQueueBatchAsync(IEnumerable<MessageBatchRequest> message, int? delaySeconds = null, CancellationToken cancellationToken = default)
    parameters:
    - id: message
      type: System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest}
      description: The collection of messages to be enqueued.
    - id: delaySeconds
      type: System.Nullable{System.Int32}
      description: The delay in seconds before the messages become available for retrieval.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Innovt.Cloud.Queue.MessageQueueResult}}
      description: A list of message enqueue results.
    content.vb: Function EnQueueBatchAsync(message As IEnumerable(Of MessageBatchRequest), delaySeconds As Integer? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of MessageQueueResult))
  overload: Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync*
  nameWithType.vb: IQueueService(Of T).EnQueueBatchAsync(IEnumerable(Of MessageBatchRequest), Integer?, CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).EnQueueBatchAsync(System.Collections.Generic.IEnumerable(Of Innovt.Cloud.Queue.MessageBatchRequest), Integer?, System.Threading.CancellationToken)
  name.vb: EnQueueBatchAsync(IEnumerable(Of MessageBatchRequest), Integer?, CancellationToken)
- uid: Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync(System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync(System.Threading.CancellationToken)
  id: ApproximateMessageCountAsync(System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: ApproximateMessageCountAsync(CancellationToken)
  nameWithType: IQueueService<T>.ApproximateMessageCountAsync(CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.ApproximateMessageCountAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ApproximateMessageCountAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 61
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Retrieves the approximate number of messages in the queue asynchronously.
  example: []
  syntax:
    content: Task<int> ApproximateMessageCountAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The approximate message count in the queue.
    content.vb: Function ApproximateMessageCountAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync*
  nameWithType.vb: IQueueService(Of T).ApproximateMessageCountAsync(CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).ApproximateMessageCountAsync(System.Threading.CancellationToken)
- uid: Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync(System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync(System.Threading.CancellationToken)
  id: CreateIfNotExistAsync(System.Threading.CancellationToken)
  parent: Innovt.Cloud.Queue.IQueueService`1
  langs:
  - csharp
  - vb
  name: CreateIfNotExistAsync(CancellationToken)
  nameWithType: IQueueService<T>.CreateIfNotExistAsync(CancellationToken)
  fullName: Innovt.Cloud.Queue.IQueueService<T>.CreateIfNotExistAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Queue/IQueueService.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CreateIfNotExistAsync
    path: ../src/Innovt.Cloud/Queue/IQueueService.cs
    startLine: 68
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Queue
  summary: Creates the queue if it does not already exist asynchronously.
  example: []
  syntax:
    content: Task CreateIfNotExistAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Function CreateIfNotExistAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync*
  nameWithType.vb: IQueueService(Of T).CreateIfNotExistAsync(CancellationToken)
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).CreateIfNotExistAsync(System.Threading.CancellationToken)
references:
- uid: Innovt.Cloud.Queue
  commentId: N:Innovt.Cloud.Queue
  href: Innovt.html
  name: Innovt.Cloud.Queue
  nameWithType: Innovt.Cloud.Queue
  fullName: Innovt.Cloud.Queue
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.Queue
    name: Queue
    href: Innovt.Cloud.Queue.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.Queue
    name: Queue
    href: Innovt.Cloud.Queue.html
- uid: System.Object.Innovt.Core.Utilities.Extensions.IsNull
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  parent: Innovt.Core.Utilities.Mapper.SimpleMapper
  definition: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions
  commentId: T:Innovt.Core.Utilities.Extensions
  parent: Innovt.Core.Utilities
  href: Innovt.Core.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Innovt.Core.Utilities.Extensions
- uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper
  commentId: T:Innovt.Core.Utilities.Mapper.SimpleMapper
  parent: Innovt.Core.Utilities.Mapper
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html
  name: SimpleMapper
  nameWithType: SimpleMapper
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper
- uid: Innovt.Core.Utilities
  commentId: N:Innovt.Core.Utilities
  href: Innovt.html
  name: Innovt.Core.Utilities
  nameWithType: Innovt.Core.Utilities
  fullName: Innovt.Core.Utilities
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
- uid: Innovt.Core.Utilities.Mapper
  commentId: N:Innovt.Core.Utilities.Mapper
  href: Innovt.html
  name: Innovt.Core.Utilities.Mapper
  nameWithType: Innovt.Core.Utilities.Mapper
  fullName: Innovt.Core.Utilities.Mapper
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
- uid: Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.GetMessagesAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_GetMessagesAsync_System_Int32_System_Nullable_System_Int32__System_Nullable_System_Int32__System_Threading_CancellationToken_
  name: GetMessagesAsync
  nameWithType: IQueueService<T>.GetMessagesAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.GetMessagesAsync
  nameWithType.vb: IQueueService(Of T).GetMessagesAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).GetMessagesAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IList<T>>
  nameWithType: Task<IList<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<T>>
  nameWithType.vb: Task(Of IList(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of T))
  name.vb: Task(Of IList(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.DeQueueAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_DeQueueAsync_System_String_System_Threading_CancellationToken_
  name: DeQueueAsync
  nameWithType: IQueueService<T>.DeQueueAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.DeQueueAsync
  nameWithType.vb: IQueueService(Of T).DeQueueAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).DeQueueAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.EnQueueAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_EnQueueAsync__1___0_System_Nullable_System_Int32__System_Threading_CancellationToken_
  name: EnQueueAsync
  nameWithType: IQueueService<T>.EnQueueAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.EnQueueAsync
  nameWithType.vb: IQueueService(Of T).EnQueueAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).EnQueueAsync
- uid: '{TK}'
  commentId: '!:TK'
  definition: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.EnQueueBatchAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_EnQueueBatchAsync_System_Collections_Generic_IEnumerable_Innovt_Cloud_Queue_MessageBatchRequest__System_Nullable_System_Int32__System_Threading_CancellationToken_
  name: EnQueueBatchAsync
  nameWithType: IQueueService<T>.EnQueueBatchAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.EnQueueBatchAsync
  nameWithType.vb: IQueueService(Of T).EnQueueBatchAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).EnQueueBatchAsync
- uid: System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest}
  commentId: T:System.Collections.Generic.IEnumerable{Innovt.Cloud.Queue.MessageBatchRequest}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<MessageBatchRequest>
  nameWithType: IEnumerable<MessageBatchRequest>
  fullName: System.Collections.Generic.IEnumerable<Innovt.Cloud.Queue.MessageBatchRequest>
  nameWithType.vb: IEnumerable(Of MessageBatchRequest)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Innovt.Cloud.Queue.MessageBatchRequest)
  name.vb: IEnumerable(Of MessageBatchRequest)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Innovt.Cloud.Queue.MessageBatchRequest
    name: MessageBatchRequest
    href: Innovt.Cloud.Queue.MessageBatchRequest.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Cloud.Queue.MessageBatchRequest
    name: MessageBatchRequest
    href: Innovt.Cloud.Queue.MessageBatchRequest.html
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Innovt.Cloud.Queue.MessageQueueResult}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Innovt.Cloud.Queue.MessageQueueResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IList<MessageQueueResult>>
  nameWithType: Task<IList<MessageQueueResult>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Innovt.Cloud.Queue.MessageQueueResult>>
  nameWithType.vb: Task(Of IList(Of MessageQueueResult))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Innovt.Cloud.Queue.MessageQueueResult))
  name.vb: Task(Of IList(Of MessageQueueResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: Innovt.Cloud.Queue.MessageQueueResult
    name: MessageQueueResult
    href: Innovt.Cloud.Queue.MessageQueueResult.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Cloud.Queue.MessageQueueResult
    name: MessageQueueResult
    href: Innovt.Cloud.Queue.MessageQueueResult.html
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.ApproximateMessageCountAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_ApproximateMessageCountAsync_System_Threading_CancellationToken_
  name: ApproximateMessageCountAsync
  nameWithType: IQueueService<T>.ApproximateMessageCountAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.ApproximateMessageCountAsync
  nameWithType.vb: IQueueService(Of T).ApproximateMessageCountAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).ApproximateMessageCountAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync*
  commentId: Overload:Innovt.Cloud.Queue.IQueueService`1.CreateIfNotExistAsync
  href: Innovt.Cloud.Queue.IQueueService-1.html#Innovt_Cloud_Queue_IQueueService_1_CreateIfNotExistAsync_System_Threading_CancellationToken_
  name: CreateIfNotExistAsync
  nameWithType: IQueueService<T>.CreateIfNotExistAsync
  fullName: Innovt.Cloud.Queue.IQueueService<T>.CreateIfNotExistAsync
  nameWithType.vb: IQueueService(Of T).CreateIfNotExistAsync
  fullName.vb: Innovt.Cloud.Queue.IQueueService(Of T).CreateIfNotExistAsync
