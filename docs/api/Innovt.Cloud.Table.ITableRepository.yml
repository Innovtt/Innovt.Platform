### YamlMime:ManagedReference
items:
- uid: Innovt.Cloud.Table.ITableRepository
  commentId: T:Innovt.Cloud.Table.ITableRepository
  id: ITableRepository
  parent: Innovt.Cloud.Table
  children:
  - Innovt.Cloud.Table.ITableRepository.AddAsync``1(``0,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.AddRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.BatchGetItem``1(Innovt.Cloud.Table.BatchGetItemRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.BatchWriteItem(Innovt.Cloud.Table.BatchWriteItemRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem``1(``0,Innovt.Cloud.Table.TransactionWriteOperationType)
  - Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(``0,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync``1(Innovt.Cloud.Table.ExecuteSqlStatementRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.GetByIdAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryAsync``1(System.Object,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryFirstAsync``1(System.Object,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``3(Innovt.Cloud.Table.QueryRequest,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``4(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``5(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``6(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.ScanAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync(Innovt.Cloud.Table.TransactionWriteRequest,System.Threading.CancellationToken)
  - Innovt.Cloud.Table.ITableRepository.UpdateAsync``1(``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITableRepository
  nameWithType: ITableRepository
  fullName: Innovt.Cloud.Table.ITableRepository
  type: Interface
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ITableRepository
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 15
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Interface representing a repository for interacting with a table.
  example: []
  syntax:
    content: 'public interface ITableRepository : IDisposable'
    content.vb: Public Interface ITableRepository Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Object.Innovt.Core.Utilities.Extensions.IsNull
  - System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  - System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
- uid: Innovt.Cloud.Table.ITableRepository.AddAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.AddAsync``1(``0,System.Threading.CancellationToken)
  id: AddAsync``1(``0,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: AddAsync<T>(T, CancellationToken)
  nameWithType: ITableRepository.AddAsync<T>(T, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.AddAsync<T>(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 24
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously adds a single item to the repository.
  example: []
  syntax:
    content: 'Task AddAsync<T>(T message, CancellationToken cancellationToken = default) where T : class'
    parameters:
    - id: message
      type: '{T}'
      description: The item to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to add.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous add operation.
    content.vb: Function AddAsync(Of T As Class)(message As T, cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Table.ITableRepository.AddAsync*
  nameWithType.vb: ITableRepository.AddAsync(Of T)(T, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.AddAsync(Of T)(T, System.Threading.CancellationToken)
  name.vb: AddAsync(Of T)(T, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.AddRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.AddRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  id: AddRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: AddRangeAsync<T>(ICollection<T>, CancellationToken)
  nameWithType: ITableRepository.AddRangeAsync<T>(ICollection<T>, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.AddRangeAsync<T>(System.Collections.Generic.ICollection<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddRangeAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 33
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously adds multiple items to the repository.
  example: []
  syntax:
    content: 'Task AddRangeAsync<T>(ICollection<T> messages, CancellationToken cancellationToken = default) where T : class'
    parameters:
    - id: messages
      type: System.Collections.Generic.ICollection{{T}}
      description: The list of items to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to add.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous add operation.
    content.vb: Function AddRangeAsync(Of T As Class)(messages As ICollection(Of T), cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Table.ITableRepository.AddRangeAsync*
  nameWithType.vb: ITableRepository.AddRangeAsync(Of T)(ICollection(Of T), CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.AddRangeAsync(Of T)(System.Collections.Generic.ICollection(Of T), System.Threading.CancellationToken)
  name.vb: AddRangeAsync(Of T)(ICollection(Of T), CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.UpdateAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.UpdateAsync``1(``0,System.Threading.CancellationToken)
  id: UpdateAsync``1(``0,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: UpdateAsync<T>(T, CancellationToken)
  nameWithType: ITableRepository.UpdateAsync<T>(T, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.UpdateAsync<T>(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: UpdateAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 43
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: >-
    This method will perform an update operation on the table. The operation is based on the primary key and type is

    PUT.
  example: []
  syntax:
    content: 'Task<T> UpdateAsync<T>(T instance, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: instance
      type: '{T}'
      description: The instance that you want to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token.
    typeParameters:
    - id: T
      description: The instance updated.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Function UpdateAsync(Of T As {Class, New})(instance As T, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Cloud.Table.ITableRepository.UpdateAsync*
  nameWithType.vb: ITableRepository.UpdateAsync(Of T)(T, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.UpdateAsync(Of T)(T, System.Threading.CancellationToken)
  name.vb: UpdateAsync(Of T)(T, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync(Innovt.Cloud.Table.TransactionWriteRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync(Innovt.Cloud.Table.TransactionWriteRequest,System.Threading.CancellationToken)
  id: TransactWriteItemsAsync(Innovt.Cloud.Table.TransactionWriteRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: TransactWriteItemsAsync(TransactionWriteRequest, CancellationToken)
  nameWithType: ITableRepository.TransactWriteItemsAsync(TransactionWriteRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync(Innovt.Cloud.Table.TransactionWriteRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: TransactWriteItemsAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 51
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously performs a transactional write of items.
  example: []
  syntax:
    content: Task TransactWriteItemsAsync(TransactionWriteRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Innovt.Cloud.Table.TransactionWriteRequest
      description: The transaction write request specifying the items to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous transactional write operation.
    content.vb: Function TransactWriteItemsAsync(request As TransactionWriteRequest, cancellationToken As CancellationToken) As Task
  overload: Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync*
- uid: Innovt.Cloud.Table.ITableRepository.BatchWriteItem(Innovt.Cloud.Table.BatchWriteItemRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.BatchWriteItem(Innovt.Cloud.Table.BatchWriteItemRequest,System.Threading.CancellationToken)
  id: BatchWriteItem(Innovt.Cloud.Table.BatchWriteItemRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: BatchWriteItem(BatchWriteItemRequest, CancellationToken)
  nameWithType: ITableRepository.BatchWriteItem(BatchWriteItemRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.BatchWriteItem(Innovt.Cloud.Table.BatchWriteItemRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: BatchWriteItem
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 59
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously performs a batch write operation.
  example: []
  syntax:
    content: Task<BatchWriteItemResponse> BatchWriteItem(BatchWriteItemRequest batchWriteItemRequest, CancellationToken cancellationToken = default)
    parameters:
    - id: batchWriteItemRequest
      type: Innovt.Cloud.Table.BatchWriteItemRequest
      description: The batch write item request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Innovt.Cloud.Table.BatchWriteItemResponse}
      description: A response from the batch write operation.
    content.vb: Function BatchWriteItem(batchWriteItemRequest As BatchWriteItemRequest, cancellationToken As CancellationToken = Nothing) As Task(Of BatchWriteItemResponse)
  overload: Innovt.Cloud.Table.ITableRepository.BatchWriteItem*
- uid: Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(``0,System.Threading.CancellationToken)
  id: DeleteAsync``1(``0,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(T, CancellationToken)
  nameWithType: ITableRepository.DeleteAsync<T>(T, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.DeleteAsync<T>(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeleteAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 70
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously deletes an item using its value.
  example: []
  syntax:
    content: 'Task DeleteAsync<T>(T message, CancellationToken cancellationToken = default) where T : class'
    parameters:
    - id: message
      type: '{T}'
      description: The item to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to delete.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous delete operation.
    content.vb: Function DeleteAsync(Of T As Class)(message As T, cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Table.ITableRepository.DeleteAsync*
  nameWithType.vb: ITableRepository.DeleteAsync(Of T)(T, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.DeleteAsync(Of T)(T, System.Threading.CancellationToken)
  name.vb: DeleteAsync(Of T)(T, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.DeleteAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  id: DeleteAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(object, string, CancellationToken)
  nameWithType: ITableRepository.DeleteAsync<T>(object, string, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.DeleteAsync<T>(object, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeleteAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 80
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously deletes an item using its identifier and optional range key.
  example: []
  syntax:
    content: 'Task DeleteAsync<T>(object id, string rangeKey = null, CancellationToken cancellationToken = default) where T : class'
    parameters:
    - id: id
      type: System.Object
      description: The identifier of the item.
    - id: rangeKey
      type: System.String
      description: The range key for the item (optional).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to delete.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous delete operation.
    content.vb: Function DeleteAsync(Of T As Class)(id As Object, rangeKey As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Table.ITableRepository.DeleteAsync*
  nameWithType.vb: ITableRepository.DeleteAsync(Of T)(Object, String, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.DeleteAsync(Of T)(Object, String, System.Threading.CancellationToken)
  name.vb: DeleteAsync(Of T)(Object, String, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  id: DeleteRangeAsync``1(System.Collections.Generic.ICollection{``0},System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: DeleteRangeAsync<T>(ICollection<T>, CancellationToken)
  nameWithType: ITableRepository.DeleteRangeAsync<T>(ICollection<T>, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync<T>(System.Collections.Generic.ICollection<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeleteRangeAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 90
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously a list of item that are from the same type.
  example: []
  syntax:
    content: 'Task DeleteRangeAsync<T>(ICollection<T> messages, CancellationToken cancellationToken = default) where T : class'
    parameters:
    - id: messages
      type: System.Collections.Generic.ICollection{{T}}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function DeleteRangeAsync(Of T As Class)(messages As ICollection(Of T), cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync*
  nameWithType.vb: ITableRepository.DeleteRangeAsync(Of T)(ICollection(Of T), CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync(Of T)(System.Collections.Generic.ICollection(Of T), System.Threading.CancellationToken)
  name.vb: DeleteRangeAsync(Of T)(ICollection(Of T), CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.GetByIdAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.GetByIdAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  id: GetByIdAsync``1(System.Object,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: GetByIdAsync<T>(object, string, CancellationToken)
  nameWithType: ITableRepository.GetByIdAsync<T>(object, string, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.GetByIdAsync<T>(object, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetByIdAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 102
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously retrieves an item by its identifier.
  example: []
  syntax:
    content: 'Task<T> GetByIdAsync<T>(object id, string rangeKey = null, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: id
      type: System.Object
      description: The identifier of the item.
    - id: rangeKey
      type: System.String
      description: The range key for the item (optional).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to retrieve.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: An item of type T if found; otherwise, null.
    content.vb: Function GetByIdAsync(Of T As {Class, New})(id As Object, rangeKey As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Cloud.Table.ITableRepository.GetByIdAsync*
  nameWithType.vb: ITableRepository.GetByIdAsync(Of T)(Object, String, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.GetByIdAsync(Of T)(Object, String, System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Of T)(Object, String, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryFirstAsync``1(System.Object,System.Threading.CancellationToken)
  id: QueryFirstAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryFirstAsync<T>(object, CancellationToken)
  nameWithType: ITableRepository.QueryFirstAsync<T>(object, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync<T>(object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryFirstAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 112
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves the first item of type T by its identifier.
  example: []
  syntax:
    content: 'Task<T> QueryFirstAsync<T>(object id, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: id
      type: System.Object
      description: The identifier of the item.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to retrieve.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: An item of type T if found; otherwise, null.
    content.vb: Function QueryFirstAsync(Of T As {Class, New})(id As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync*
  nameWithType.vb: ITableRepository.QueryFirstAsync(Of T)(Object, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync(Of T)(Object, System.Threading.CancellationToken)
  name.vb: QueryFirstAsync(Of T)(Object, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryAsync``1(System.Object,System.Threading.CancellationToken)
  id: QueryAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryAsync<T>(object, CancellationToken)
  nameWithType: ITableRepository.QueryAsync<T>(object, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryAsync<T>(object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 121
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves a list of items of type T by their identifier.
  example: []
  syntax:
    content: 'Task<IList<T>> QueryAsync<T>(object id, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: id
      type: System.Object
      description: The identifier of the items.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
      description: A list of items of type T.
    content.vb: Function QueryAsync(Of T As {Class, New})(id As Object, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.QueryAsync*
  nameWithType.vb: ITableRepository.QueryAsync(Of T)(Object, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryAsync(Of T)(Object, System.Threading.CancellationToken)
  name.vb: QueryAsync(Of T)(Object, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  id: QueryAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryAsync<T>(QueryRequest, CancellationToken)
  nameWithType: ITableRepository.QueryAsync<T>(QueryRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryAsync<T>(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 130
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves a list of items of type T based on the provided query request.
  example: []
  syntax:
    content: 'Task<IList<T>> QueryAsync<T>(QueryRequest request, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
      description: A list of items of type T based on the query request.
    content.vb: Function QueryAsync(Of T As {Class, New})(request As QueryRequest, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.QueryAsync*
  nameWithType.vb: ITableRepository.QueryAsync(Of T)(QueryRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryAsync(Of T)(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  name.vb: QueryAsync(Of T)(QueryRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  id: QueryFirstOrDefaultAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryFirstOrDefaultAsync<T>(QueryRequest, CancellationToken)
  nameWithType: ITableRepository.QueryFirstOrDefaultAsync<T>(QueryRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync<T>(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryFirstOrDefaultAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 140
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves the first item of type T based on the provided query request.
  example: []
  syntax:
    content: 'Task<T> QueryFirstOrDefaultAsync<T>(QueryRequest request, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of item to retrieve.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The first item of type T based on the query request; otherwise, null.
    content.vb: Function QueryFirstOrDefaultAsync(Of T As {Class, New})(request As QueryRequest, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync*
  nameWithType.vb: ITableRepository.QueryFirstOrDefaultAsync(Of T)(QueryRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync(Of T)(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  name.vb: QueryFirstOrDefaultAsync(Of T)(QueryRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``3(Innovt.Cloud.Table.QueryRequest,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``3(Innovt.Cloud.Table.QueryRequest,System.String,System.Threading.CancellationToken)
  id: QueryMultipleAsync``3(Innovt.Cloud.Table.QueryRequest,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryMultipleAsync<T, TResult1, TResult2>(QueryRequest, string, CancellationToken)
  nameWithType: ITableRepository.QueryMultipleAsync<T, TResult1, TResult2>(QueryRequest, string, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync<T, TResult1, TResult2>(Innovt.Cloud.Table.QueryRequest, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryMultipleAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 153
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves multiple sets of results from a single query.
  example: []
  syntax:
    content: 'Task<(IList<TResult1> first, IList<TResult2> second)> QueryMultipleAsync<T, TResult1, TResult2>(QueryRequest request, string splitBy, CancellationToken cancellationToken = default) where T : class, new() where TResult1 : class, new() where TResult2 : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request.
    - id: splitBy
      type: System.String
      description: The parameter to split the results by.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    - id: TResult1
      description: The type of the first result set.
    - id: TResult2
      description: The type of the second result set.
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}}}}
      description: Tuple containing the first and second result sets.
    content.vb: Function QueryMultipleAsync(Of T As {Class, New}, TResult1 As {Class, New}, TResult2 As {Class, New})(request As QueryRequest, splitBy As String, cancellationToken As CancellationToken = Nothing) As Task(Of (first As IList(Of TResult1), second As IList(Of TResult2)))
  overload: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync*
  nameWithType.vb: ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2)(QueryRequest, String, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2)(Innovt.Cloud.Table.QueryRequest, String, System.Threading.CancellationToken)
  name.vb: QueryMultipleAsync(Of T, TResult1, TResult2)(QueryRequest, String, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``4(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``4(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  id: QueryMultipleAsync``4(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryMultipleAsync<T, TResult1, TResult2, TResult3>(QueryRequest, string[], CancellationToken)
  nameWithType: ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3>(QueryRequest, string[], CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3>(Innovt.Cloud.Table.QueryRequest, string[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryMultipleAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 169
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves multiple sets of results from a single query.
  example: []
  syntax:
    content: 'Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third)> QueryMultipleAsync<T, TResult1, TResult2, TResult3>(QueryRequest request, string[] splitBy, CancellationToken cancellationToken = default) where T : class, new() where TResult1 : class, new() where TResult2 : class, new() where TResult3 : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: splitBy
      type: System.String[]
      description: The parameter to split the results by.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    - id: TResult1
      description: The type of the first result set.
    - id: TResult2
      description: The type of the second result set.
    - id: TResult3
      description: The type of the third result set.
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}}}}
      description: Tuple containing the first, second, and third result sets.
    content.vb: Function QueryMultipleAsync(Of T As {Class, New}, TResult1 As {Class, New}, TResult2 As {Class, New}, TResult3 As {Class, New})(request As QueryRequest, splitBy As String(), cancellationToken As CancellationToken = Nothing) As Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3)))
  overload: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync*
  nameWithType.vb: ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3)(QueryRequest, String(), CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3)(Innovt.Cloud.Table.QueryRequest, String(), System.Threading.CancellationToken)
  name.vb: QueryMultipleAsync(Of T, TResult1, TResult2, TResult3)(QueryRequest, String(), CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``5(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``5(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  id: QueryMultipleAsync``5(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4>(QueryRequest, string[], CancellationToken)
  nameWithType: ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4>(QueryRequest, string[], CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4>(Innovt.Cloud.Table.QueryRequest, string[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryMultipleAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 188
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves multiple sets of results from a single query.
  example: []
  syntax:
    content: 'Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth)> QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4>(QueryRequest request, string[] splitBy, CancellationToken cancellationToken = default) where T : class, new() where TResult1 : class, new() where TResult2 : class, new() where TResult3 : class, new() where TResult4 : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: splitBy
      type: System.String[]
      description: The parameter to split the results by.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    - id: TResult1
      description: The type of the first result set.
    - id: TResult2
      description: The type of the second result set.
    - id: TResult3
      description: The type of the third result set.
    - id: TResult4
      description: The type of the fourth result set.
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}},System.Collections.Generic.IList{{TResult4}}}}
      description: Tuple containing the first, second, third, and fourth result sets.
    content.vb: Function QueryMultipleAsync(Of T As {Class, New}, TResult1 As {Class, New}, TResult2 As {Class, New}, TResult3 As {Class, New}, TResult4 As {Class, New})(request As QueryRequest, splitBy As String(), cancellationToken As CancellationToken = Nothing) As Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4)))
  overload: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync*
  nameWithType.vb: ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4)(QueryRequest, String(), CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4)(Innovt.Cloud.Table.QueryRequest, String(), System.Threading.CancellationToken)
  name.vb: QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4)(QueryRequest, String(), CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``6(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync``6(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  id: QueryMultipleAsync``6(Innovt.Cloud.Table.QueryRequest,System.String[],System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4, TResult5>(QueryRequest, string[], CancellationToken)
  nameWithType: ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4, TResult5>(QueryRequest, string[], CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4, TResult5>(Innovt.Cloud.Table.QueryRequest, string[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryMultipleAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 209
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves multiple sets of results from a single query.
  example: []
  syntax:
    content: 'Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth, IList<TResult5> fifth)> QueryMultipleAsync<T, TResult1, TResult2, TResult3, TResult4, TResult5>(QueryRequest request, string[] splitBy, CancellationToken cancellationToken = default) where T : class, new() where TResult1 : class, new() where TResult2 : class, new() where TResult3 : class, new() where TResult4 : class, new() where TResult5 : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: splitBy
      type: System.String[]
      description: The parameter to split the results by.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    - id: TResult1
      description: The type of the first result set.
    - id: TResult2
      description: The type of the second result set.
    - id: TResult3
      description: The type of the third result set.
    - id: TResult4
      description: The type of the fourth result set.
    - id: TResult5
      description: The type of the fifth result set.
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}},System.Collections.Generic.IList{{TResult4}},System.Collections.Generic.IList{{TResult5}}}}
      description: Tuple containing the first, second, third, fourth, and fifth result sets.
    content.vb: Function QueryMultipleAsync(Of T As {Class, New}, TResult1 As {Class, New}, TResult2 As {Class, New}, TResult3 As {Class, New}, TResult4 As {Class, New}, TResult5 As {Class, New})(request As QueryRequest, splitBy As String(), cancellationToken As CancellationToken = Nothing) As Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4), fifth As IList(Of TResult5)))
  overload: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync*
  nameWithType.vb: ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4, TResult5)(QueryRequest, String(), CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4, TResult5)(Innovt.Cloud.Table.QueryRequest, String(), System.Threading.CancellationToken)
  name.vb: QueryMultipleAsync(Of T, TResult1, TResult2, TResult3, TResult4, TResult5)(QueryRequest, String(), CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.ScanAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.ScanAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  id: ScanAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: ScanAsync<T>(ScanRequest, CancellationToken)
  nameWithType: ITableRepository.ScanAsync<T>(ScanRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.ScanAsync<T>(Innovt.Cloud.Table.ScanRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ScanAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 227
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously scans and retrieves a list of items of type T based on the provided scan request.
  example: []
  syntax:
    content: 'Task<IList<T>> ScanAsync<T>(ScanRequest request, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.ScanRequest
      description: The scan request specifying the scan parameters.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
      description: A list of items of type T based on the scan request.
    content.vb: Function ScanAsync(Of T As {Class, New})(request As ScanRequest, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.ScanAsync*
  nameWithType.vb: ITableRepository.ScanAsync(Of T)(ScanRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.ScanAsync(Of T)(Innovt.Cloud.Table.ScanRequest, System.Threading.CancellationToken)
  name.vb: ScanAsync(Of T)(ScanRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  id: ScanPaginatedByAsync``1(Innovt.Cloud.Table.ScanRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: ScanPaginatedByAsync<T>(ScanRequest, CancellationToken)
  nameWithType: ITableRepository.ScanPaginatedByAsync<T>(ScanRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync<T>(Innovt.Cloud.Table.ScanRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ScanPaginatedByAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 237
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously scans and retrieves a paged collection of items of type T based on the provided scan request.
  example: []
  syntax:
    content: 'Task<PagedCollection<T>> ScanPaginatedByAsync<T>(ScanRequest request, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.ScanRequest
      description: The scan request specifying the scan parameters.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
      description: A paged collection of items of type T based on the scan request.
    content.vb: Function ScanPaginatedByAsync(Of T As {Class, New})(request As ScanRequest, cancellationToken As CancellationToken = Nothing) As Task(Of PagedCollection(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync*
  nameWithType.vb: ITableRepository.ScanPaginatedByAsync(Of T)(ScanRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync(Of T)(Innovt.Cloud.Table.ScanRequest, System.Threading.CancellationToken)
  name.vb: ScanPaginatedByAsync(Of T)(ScanRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  id: QueryPaginatedByAsync``1(Innovt.Cloud.Table.QueryRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: QueryPaginatedByAsync<T>(QueryRequest, CancellationToken)
  nameWithType: ITableRepository.QueryPaginatedByAsync<T>(QueryRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync<T>(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: QueryPaginatedByAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 248
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously queries and retrieves a paged collection of items of type T based on the provided query request.
  example: []
  syntax:
    content: 'Task<PagedCollection<T>> QueryPaginatedByAsync<T>(QueryRequest request, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: request
      type: Innovt.Cloud.Table.QueryRequest
      description: The query request specifying the query parameters.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
      description: A paged collection of items of type T based on the query request.
    content.vb: Function QueryPaginatedByAsync(Of T As {Class, New})(request As QueryRequest, cancellationToken As CancellationToken = Nothing) As Task(Of PagedCollection(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync*
  nameWithType.vb: ITableRepository.QueryPaginatedByAsync(Of T)(QueryRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync(Of T)(Innovt.Cloud.Table.QueryRequest, System.Threading.CancellationToken)
  name.vb: QueryPaginatedByAsync(Of T)(QueryRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync``1(Innovt.Cloud.Table.ExecuteSqlStatementRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync``1(Innovt.Cloud.Table.ExecuteSqlStatementRequest,System.Threading.CancellationToken)
  id: ExecuteStatementAsync``1(Innovt.Cloud.Table.ExecuteSqlStatementRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: ExecuteStatementAsync<T>(ExecuteSqlStatementRequest, CancellationToken)
  nameWithType: ITableRepository.ExecuteStatementAsync<T>(ExecuteSqlStatementRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync<T>(Innovt.Cloud.Table.ExecuteSqlStatementRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ExecuteStatementAsync
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 259
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Executes an SQL statement asynchronously and retrieves the results.
  example: []
  syntax:
    content: 'Task<ExecuteSqlStatementResponse<T>> ExecuteStatementAsync<T>(ExecuteSqlStatementRequest sqlStatementRequest, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: sqlStatementRequest
      type: Innovt.Cloud.Table.ExecuteSqlStatementRequest
      description: The SQL statement request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of results to expect.
    return:
      type: System.Threading.Tasks.Task{Innovt.Cloud.Table.ExecuteSqlStatementResponse{{T}}}
      description: A response containing the results of the SQL statement execution.
    content.vb: Function ExecuteStatementAsync(Of T As {Class, New})(sqlStatementRequest As ExecuteSqlStatementRequest, cancellationToken As CancellationToken = Nothing) As Task(Of ExecuteSqlStatementResponse(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync*
  nameWithType.vb: ITableRepository.ExecuteStatementAsync(Of T)(ExecuteSqlStatementRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync(Of T)(Innovt.Cloud.Table.ExecuteSqlStatementRequest, System.Threading.CancellationToken)
  name.vb: ExecuteStatementAsync(Of T)(ExecuteSqlStatementRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.BatchGetItem``1(Innovt.Cloud.Table.BatchGetItemRequest,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.Table.ITableRepository.BatchGetItem``1(Innovt.Cloud.Table.BatchGetItemRequest,System.Threading.CancellationToken)
  id: BatchGetItem``1(Innovt.Cloud.Table.BatchGetItemRequest,System.Threading.CancellationToken)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: BatchGetItem<T>(BatchGetItemRequest, CancellationToken)
  nameWithType: ITableRepository.BatchGetItem<T>(BatchGetItemRequest, CancellationToken)
  fullName: Innovt.Cloud.Table.ITableRepository.BatchGetItem<T>(Innovt.Cloud.Table.BatchGetItemRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: BatchGetItem
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 269
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Asynchronously retrieves multiple items in a batch.
  example: []
  syntax:
    content: 'Task<List<T>> BatchGetItem<T>(BatchGetItemRequest batchGetItemRequest, CancellationToken cancellationToken = default) where T : class, new()'
    parameters:
    - id: batchGetItemRequest
      type: Innovt.Cloud.Table.BatchGetItemRequest
      description: The batch get item request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The type of items to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: A list of items of type T.
    content.vb: Function BatchGetItem(Of T As {Class, New})(batchGetItemRequest As BatchGetItemRequest, cancellationToken As CancellationToken = Nothing) As Task(Of List(Of T))
  overload: Innovt.Cloud.Table.ITableRepository.BatchGetItem*
  nameWithType.vb: ITableRepository.BatchGetItem(Of T)(BatchGetItemRequest, CancellationToken)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.BatchGetItem(Of T)(Innovt.Cloud.Table.BatchGetItemRequest, System.Threading.CancellationToken)
  name.vb: BatchGetItem(Of T)(BatchGetItemRequest, CancellationToken)
- uid: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem``1(``0,Innovt.Cloud.Table.TransactionWriteOperationType)
  commentId: M:Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem``1(``0,Innovt.Cloud.Table.TransactionWriteOperationType)
  id: CreateTransactionWriteItem``1(``0,Innovt.Cloud.Table.TransactionWriteOperationType)
  parent: Innovt.Cloud.Table.ITableRepository
  langs:
  - csharp
  - vb
  name: CreateTransactionWriteItem<T>(T, TransactionWriteOperationType)
  nameWithType: ITableRepository.CreateTransactionWriteItem<T>(T, TransactionWriteOperationType)
  fullName: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem<T>(T, Innovt.Cloud.Table.TransactionWriteOperationType)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/Table/ITableRepository.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CreateTransactionWriteItem
    path: ../src/Innovt.Cloud/Table/ITableRepository.cs
    startLine: 279
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.Table
  summary: Create a transaction write item based on the instance.
  example: []
  syntax:
    content: 'TransactionWriteItem CreateTransactionWriteItem<T>(T instance, TransactionWriteOperationType operationType = TransactionWriteOperationType.Put) where T : class, new()'
    parameters:
    - id: instance
      type: '{T}'
      description: A mapped instance with context.
    - id: operationType
      type: Innovt.Cloud.Table.TransactionWriteOperationType
      description: The operation that you want to perform.
    typeParameters:
    - id: T
      description: A typed mapped entity
    return:
      type: Innovt.Cloud.Table.TransactionWriteItem
      description: A incomplete transaction write item with properties mapped.
    content.vb: Function CreateTransactionWriteItem(Of T As {Class, New})(instance As T, operationType As TransactionWriteOperationType = TransactionWriteOperationType.Put) As TransactionWriteItem
  overload: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem*
  nameWithType.vb: ITableRepository.CreateTransactionWriteItem(Of T)(T, TransactionWriteOperationType)
  fullName.vb: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem(Of T)(T, Innovt.Cloud.Table.TransactionWriteOperationType)
  name.vb: CreateTransactionWriteItem(Of T)(T, TransactionWriteOperationType)
references:
- uid: Innovt.Cloud.Table
  commentId: N:Innovt.Cloud.Table
  href: Innovt.html
  name: Innovt.Cloud.Table
  nameWithType: Innovt.Cloud.Table
  fullName: Innovt.Cloud.Table
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.Table
    name: Table
    href: Innovt.Cloud.Table.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.Table
    name: Table
    href: Innovt.Cloud.Table.html
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.IsNull
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  parent: Innovt.Core.Utilities.Mapper.SimpleMapper
  definition: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions
  commentId: T:Innovt.Core.Utilities.Extensions
  parent: Innovt.Core.Utilities
  href: Innovt.Core.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Innovt.Core.Utilities.Extensions
- uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper
  commentId: T:Innovt.Core.Utilities.Mapper.SimpleMapper
  parent: Innovt.Core.Utilities.Mapper
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html
  name: SimpleMapper
  nameWithType: SimpleMapper
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Innovt.Core.Utilities
  commentId: N:Innovt.Core.Utilities
  href: Innovt.html
  name: Innovt.Core.Utilities
  nameWithType: Innovt.Core.Utilities
  fullName: Innovt.Core.Utilities
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
- uid: Innovt.Core.Utilities.Mapper
  commentId: N:Innovt.Core.Utilities.Mapper
  href: Innovt.html
  name: Innovt.Core.Utilities.Mapper
  nameWithType: Innovt.Core.Utilities.Mapper
  fullName: Innovt.Core.Utilities.Mapper
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
- uid: Innovt.Cloud.Table.ITableRepository.AddAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.AddAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_AddAsync__1___0_System_Threading_CancellationToken_
  name: AddAsync
  nameWithType: ITableRepository.AddAsync
  fullName: Innovt.Cloud.Table.ITableRepository.AddAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Innovt.Cloud.Table.ITableRepository.AddRangeAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.AddRangeAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_AddRangeAsync__1_System_Collections_Generic_ICollection___0__System_Threading_CancellationToken_
  name: AddRangeAsync
  nameWithType: ITableRepository.AddRangeAsync
  fullName: Innovt.Cloud.Table.ITableRepository.AddRangeAsync
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Innovt.Cloud.Table.ITableRepository.UpdateAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.UpdateAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_UpdateAsync__1___0_System_Threading_CancellationToken_
  name: UpdateAsync
  nameWithType: ITableRepository.UpdateAsync
  fullName: Innovt.Cloud.Table.ITableRepository.UpdateAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_TransactWriteItemsAsync_Innovt_Cloud_Table_TransactionWriteRequest_System_Threading_CancellationToken_
  name: TransactWriteItemsAsync
  nameWithType: ITableRepository.TransactWriteItemsAsync
  fullName: Innovt.Cloud.Table.ITableRepository.TransactWriteItemsAsync
- uid: Innovt.Cloud.Table.TransactionWriteRequest
  commentId: T:Innovt.Cloud.Table.TransactionWriteRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.TransactionWriteRequest.html
  name: TransactionWriteRequest
  nameWithType: TransactionWriteRequest
  fullName: Innovt.Cloud.Table.TransactionWriteRequest
- uid: Innovt.Cloud.Table.ITableRepository.BatchWriteItem*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.BatchWriteItem
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_BatchWriteItem_Innovt_Cloud_Table_BatchWriteItemRequest_System_Threading_CancellationToken_
  name: BatchWriteItem
  nameWithType: ITableRepository.BatchWriteItem
  fullName: Innovt.Cloud.Table.ITableRepository.BatchWriteItem
- uid: Innovt.Cloud.Table.BatchWriteItemRequest
  commentId: T:Innovt.Cloud.Table.BatchWriteItemRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.BatchWriteItemRequest.html
  name: BatchWriteItemRequest
  nameWithType: BatchWriteItemRequest
  fullName: Innovt.Cloud.Table.BatchWriteItemRequest
- uid: System.Threading.Tasks.Task{Innovt.Cloud.Table.BatchWriteItemResponse}
  commentId: T:System.Threading.Tasks.Task{Innovt.Cloud.Table.BatchWriteItemResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<BatchWriteItemResponse>
  nameWithType: Task<BatchWriteItemResponse>
  fullName: System.Threading.Tasks.Task<Innovt.Cloud.Table.BatchWriteItemResponse>
  nameWithType.vb: Task(Of BatchWriteItemResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Innovt.Cloud.Table.BatchWriteItemResponse)
  name.vb: Task(Of BatchWriteItemResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Innovt.Cloud.Table.BatchWriteItemResponse
    name: BatchWriteItemResponse
    href: Innovt.Cloud.Table.BatchWriteItemResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Cloud.Table.BatchWriteItemResponse
    name: BatchWriteItemResponse
    href: Innovt.Cloud.Table.BatchWriteItemResponse.html
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.DeleteAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.DeleteAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_DeleteAsync__1___0_System_Threading_CancellationToken_
  name: DeleteAsync
  nameWithType: ITableRepository.DeleteAsync
  fullName: Innovt.Cloud.Table.ITableRepository.DeleteAsync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_DeleteRangeAsync__1_System_Collections_Generic_ICollection___0__System_Threading_CancellationToken_
  name: DeleteRangeAsync
  nameWithType: ITableRepository.DeleteRangeAsync
  fullName: Innovt.Cloud.Table.ITableRepository.DeleteRangeAsync
- uid: Innovt.Cloud.Table.ITableRepository.GetByIdAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.GetByIdAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_GetByIdAsync__1_System_Object_System_String_System_Threading_CancellationToken_
  name: GetByIdAsync
  nameWithType: ITableRepository.GetByIdAsync
  fullName: Innovt.Cloud.Table.ITableRepository.GetByIdAsync
- uid: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.QueryFirstAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_QueryFirstAsync__1_System_Object_System_Threading_CancellationToken_
  name: QueryFirstAsync
  nameWithType: ITableRepository.QueryFirstAsync
  fullName: Innovt.Cloud.Table.ITableRepository.QueryFirstAsync
- uid: Innovt.Cloud.Table.ITableRepository.QueryAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.QueryAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_QueryAsync__1_System_Object_System_Threading_CancellationToken_
  name: QueryAsync
  nameWithType: ITableRepository.QueryAsync
  fullName: Innovt.Cloud.Table.ITableRepository.QueryAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IList<T>>
  nameWithType: Task<IList<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<T>>
  nameWithType.vb: Task(Of IList(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of T))
  name.vb: Task(Of IList(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Cloud.Table.QueryRequest
  commentId: T:Innovt.Cloud.Table.QueryRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.QueryRequest.html
  name: QueryRequest
  nameWithType: QueryRequest
  fullName: Innovt.Cloud.Table.QueryRequest
- uid: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_QueryFirstOrDefaultAsync__1_Innovt_Cloud_Table_QueryRequest_System_Threading_CancellationToken_
  name: QueryFirstOrDefaultAsync
  nameWithType: ITableRepository.QueryFirstOrDefaultAsync
  fullName: Innovt.Cloud.Table.ITableRepository.QueryFirstOrDefaultAsync
- uid: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_QueryMultipleAsync__3_Innovt_Cloud_Table_QueryRequest_System_String_System_Threading_CancellationToken_
  name: QueryMultipleAsync
  nameWithType: ITableRepository.QueryMultipleAsync
  fullName: Innovt.Cloud.Table.ITableRepository.QueryMultipleAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}}}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IList<TResult1> first, IList<TResult2> second)>
  nameWithType: Task<(IList<TResult1> first, IList<TResult2> second)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IList<TResult1> first, System.Collections.Generic.IList<TResult2> second)>
  nameWithType.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2)))
  fullName.vb: System.Threading.Tasks.Task(Of (first As System.Collections.Generic.IList(Of TResult1), second As System.Collections.Generic.IList(Of TResult2)))
  name.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult1
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2--.first
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult2
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2--.second
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2--.first
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult1
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2--.second
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult2
  - name: )
  - name: )
  - name: )
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}}}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third)>
  nameWithType: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IList<TResult1> first, System.Collections.Generic.IList<TResult2> second, System.Collections.Generic.IList<TResult3> third)>
  nameWithType.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3)))
  fullName.vb: System.Threading.Tasks.Task(Of (first As System.Collections.Generic.IList(Of TResult1), second As System.Collections.Generic.IList(Of TResult2), third As System.Collections.Generic.IList(Of TResult3)))
  name.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult1
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.first
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult2
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.second
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult3
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.third
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.first
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult1
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.second
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult2
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3--.third
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult3
  - name: )
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}},System.Collections.Generic.IList{{TResult4}}}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth)>
  nameWithType: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IList<TResult1> first, System.Collections.Generic.IList<TResult2> second, System.Collections.Generic.IList<TResult3> third, System.Collections.Generic.IList<TResult4> fourth)>
  nameWithType.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4)))
  fullName.vb: System.Threading.Tasks.Task(Of (first As System.Collections.Generic.IList(Of TResult1), second As System.Collections.Generic.IList(Of TResult2), third As System.Collections.Generic.IList(Of TResult3), fourth As System.Collections.Generic.IList(Of TResult4)))
  name.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult1
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.first
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult2
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.second
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult3
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.third
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult4
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.fourth
    name: fourth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.fourth
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.first
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult1
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.second
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult2
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.third
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult3
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4}}.fourth
    name: fourth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4--.fourth
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult4
  - name: )
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{{TResult1}},System.Collections.Generic.IList{{TResult2}},System.Collections.Generic.IList{{TResult3}},System.Collections.Generic.IList{{TResult4}},System.Collections.Generic.IList{{TResult5}}}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth, IList<TResult5> fifth)>
  nameWithType: Task<(IList<TResult1> first, IList<TResult2> second, IList<TResult3> third, IList<TResult4> fourth, IList<TResult5> fifth)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IList<TResult1> first, System.Collections.Generic.IList<TResult2> second, System.Collections.Generic.IList<TResult3> third, System.Collections.Generic.IList<TResult4> fourth, System.Collections.Generic.IList<TResult5> fifth)>
  nameWithType.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4), fifth As IList(Of TResult5)))
  fullName.vb: System.Threading.Tasks.Task(Of (first As System.Collections.Generic.IList(Of TResult1), second As System.Collections.Generic.IList(Of TResult2), third As System.Collections.Generic.IList(Of TResult3), fourth As System.Collections.Generic.IList(Of TResult4), fifth As System.Collections.Generic.IList(Of TResult5)))
  name.vb: Task(Of (first As IList(Of TResult1), second As IList(Of TResult2), third As IList(Of TResult3), fourth As IList(Of TResult4), fifth As IList(Of TResult5)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult1
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.first
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult2
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.second
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult3
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.third
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult4
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.fourth
    name: fourth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.fourth
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TResult5
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.fifth
    name: fifth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.fifth
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.first
    name: first
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.first
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult1
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.second
    name: second
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.second
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult2
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.third
    name: third
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.third
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult3
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.fourth
    name: fourth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.fourth
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult4
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4},System.Collections.Generic.IList{``5}}.fifth
    name: fifth
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ilist---1-,system.collections.generic.ilist---2-,system.collections.generic.ilist---3-,system.collections.generic.ilist---4-,system.collections.generic.ilist---5--.fifth
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult5
  - name: )
  - name: )
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.ScanAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.ScanAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_ScanAsync__1_Innovt_Cloud_Table_ScanRequest_System_Threading_CancellationToken_
  name: ScanAsync
  nameWithType: ITableRepository.ScanAsync
  fullName: Innovt.Cloud.Table.ITableRepository.ScanAsync
- uid: Innovt.Cloud.Table.ScanRequest
  commentId: T:Innovt.Cloud.Table.ScanRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.ScanRequest.html
  name: ScanRequest
  nameWithType: ScanRequest
  fullName: Innovt.Cloud.Table.ScanRequest
- uid: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_ScanPaginatedByAsync__1_Innovt_Cloud_Table_ScanRequest_System_Threading_CancellationToken_
  name: ScanPaginatedByAsync
  nameWithType: ITableRepository.ScanPaginatedByAsync
  fullName: Innovt.Cloud.Table.ITableRepository.ScanPaginatedByAsync
- uid: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
  commentId: T:System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PagedCollection<T>>
  nameWithType: Task<PagedCollection<T>>
  fullName: System.Threading.Tasks.Task<Innovt.Core.Collections.PagedCollection<T>>
  nameWithType.vb: Task(Of PagedCollection(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Innovt.Core.Collections.PagedCollection(Of T))
  name.vb: Task(Of PagedCollection(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_QueryPaginatedByAsync__1_Innovt_Cloud_Table_QueryRequest_System_Threading_CancellationToken_
  name: QueryPaginatedByAsync
  nameWithType: ITableRepository.QueryPaginatedByAsync
  fullName: Innovt.Cloud.Table.ITableRepository.QueryPaginatedByAsync
- uid: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_ExecuteStatementAsync__1_Innovt_Cloud_Table_ExecuteSqlStatementRequest_System_Threading_CancellationToken_
  name: ExecuteStatementAsync
  nameWithType: ITableRepository.ExecuteStatementAsync
  fullName: Innovt.Cloud.Table.ITableRepository.ExecuteStatementAsync
- uid: Innovt.Cloud.Table.ExecuteSqlStatementRequest
  commentId: T:Innovt.Cloud.Table.ExecuteSqlStatementRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.ExecuteSqlStatementRequest.html
  name: ExecuteSqlStatementRequest
  nameWithType: ExecuteSqlStatementRequest
  fullName: Innovt.Cloud.Table.ExecuteSqlStatementRequest
- uid: System.Threading.Tasks.Task{Innovt.Cloud.Table.ExecuteSqlStatementResponse{{T}}}
  commentId: T:System.Threading.Tasks.Task{Innovt.Cloud.Table.ExecuteSqlStatementResponse{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExecuteSqlStatementResponse<T>>
  nameWithType: Task<ExecuteSqlStatementResponse<T>>
  fullName: System.Threading.Tasks.Task<Innovt.Cloud.Table.ExecuteSqlStatementResponse<T>>
  nameWithType.vb: Task(Of ExecuteSqlStatementResponse(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Innovt.Cloud.Table.ExecuteSqlStatementResponse(Of T))
  name.vb: Task(Of ExecuteSqlStatementResponse(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Innovt.Cloud.Table.ExecuteSqlStatementResponse`1
    name: ExecuteSqlStatementResponse
    href: Innovt.Cloud.Table.ExecuteSqlStatementResponse-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Cloud.Table.ExecuteSqlStatementResponse`1
    name: ExecuteSqlStatementResponse
    href: Innovt.Cloud.Table.ExecuteSqlStatementResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.BatchGetItem*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.BatchGetItem
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_BatchGetItem__1_Innovt_Cloud_Table_BatchGetItemRequest_System_Threading_CancellationToken_
  name: BatchGetItem
  nameWithType: ITableRepository.BatchGetItem
  fullName: Innovt.Cloud.Table.ITableRepository.BatchGetItem
- uid: Innovt.Cloud.Table.BatchGetItemRequest
  commentId: T:Innovt.Cloud.Table.BatchGetItemRequest
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.BatchGetItemRequest.html
  name: BatchGetItemRequest
  nameWithType: BatchGetItemRequest
  fullName: Innovt.Cloud.Table.BatchGetItemRequest
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem*
  commentId: Overload:Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem
  href: Innovt.Cloud.Table.ITableRepository.html#Innovt_Cloud_Table_ITableRepository_CreateTransactionWriteItem__1___0_Innovt_Cloud_Table_TransactionWriteOperationType_
  name: CreateTransactionWriteItem
  nameWithType: ITableRepository.CreateTransactionWriteItem
  fullName: Innovt.Cloud.Table.ITableRepository.CreateTransactionWriteItem
- uid: Innovt.Cloud.Table.TransactionWriteOperationType
  commentId: T:Innovt.Cloud.Table.TransactionWriteOperationType
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.TransactionWriteOperationType.html
  name: TransactionWriteOperationType
  nameWithType: TransactionWriteOperationType
  fullName: Innovt.Cloud.Table.TransactionWriteOperationType
- uid: Innovt.Cloud.Table.TransactionWriteItem
  commentId: T:Innovt.Cloud.Table.TransactionWriteItem
  parent: Innovt.Cloud.Table
  href: Innovt.Cloud.Table.TransactionWriteItem.html
  name: TransactionWriteItem
  nameWithType: TransactionWriteItem
  fullName: Innovt.Cloud.Table.TransactionWriteItem
