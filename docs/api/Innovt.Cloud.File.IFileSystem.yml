### YamlMime:ManagedReference
items:
- uid: Innovt.Cloud.File.IFileSystem
  commentId: T:Innovt.Cloud.File.IFileSystem
  id: IFileSystem
  parent: Innovt.Cloud.File
  children:
  - Innovt.Cloud.File.IFileSystem.CopyObject(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.DeleteObject(System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.DeleteObjectAsync(System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.Download(System.String,System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.DownloadStream(System.String)
  - Innovt.Cloud.File.IFileSystem.DownloadStream(System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl(System.String)
  - Innovt.Cloud.File.IFileSystem.FileExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.FolderExists(System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.FolderExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl(System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync``1(System.Uri,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.GetPreSignedUrl(System.String,System.String,System.DateTime)
  - Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.IO.Stream,System.String,System.String,System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.String,System.String,System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.IO.Stream,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.Upload(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.Upload(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  - Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync``1(System.String,``0,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  - Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IFileSystem
  nameWithType: IFileSystem
  fullName: Innovt.Cloud.File.IFileSystem
  type: Interface
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: IFileSystem
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 16
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Interface for File System
  example: []
  syntax:
    content: public interface IFileSystem
    content.vb: Public Interface IFileSystem
  extensionMethods:
  - System.Object.Innovt.Core.Utilities.Extensions.IsNull
  - System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  - System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
- uid: Innovt.Cloud.File.IFileSystem.CopyObject(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.CopyObject(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: CopyObject(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: CopyObject(string, string, string, string, string, string, CancellationToken)
  nameWithType: IFileSystem.CopyObject(string, string, string, string, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.CopyObject(string, string, string, string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CopyObject
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 29
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Copy a file from one bucket to another
  example: []
  syntax:
    content: Task<bool> CopyObject(string sourceBucket, string sourceKey, string destinationBucket, string destinationKey, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: sourceBucket
      type: System.String
      description: ''
    - id: sourceKey
      type: System.String
      description: ''
    - id: destinationBucket
      type: System.String
      description: ''
    - id: destinationKey
      type: System.String
      description: ''
    - id: serverSideEncryptionMethod
      type: System.String
      description: ''
    - id: fileAcl
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Function CopyObject(sourceBucket As String, sourceKey As String, destinationBucket As String, destinationKey As String, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Innovt.Cloud.File.IFileSystem.CopyObject*
  nameWithType.vb: IFileSystem.CopyObject(String, String, String, String, String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.CopyObject(String, String, String, String, String, String, System.Threading.CancellationToken)
  name.vb: CopyObject(String, String, String, String, String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.Download(System.String,System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.Download(System.String,System.String,System.String)
  id: Download(System.String,System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: Download(string, string, string)
  nameWithType: IFileSystem.Download(string, string, string)
  fullName: Innovt.Cloud.File.IFileSystem.Download(string, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Download
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 35
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Downloads a file from the specified bucket and saves it to the destination path.
  example: []
  syntax:
    content: void Download(string bucketName, string fileName, string destination)
    parameters:
    - id: bucketName
      type: System.String
    - id: fileName
      type: System.String
    - id: destination
      type: System.String
    content.vb: Sub Download(bucketName As String, fileName As String, destination As String)
  overload: Innovt.Cloud.File.IFileSystem.Download*
  nameWithType.vb: IFileSystem.Download(String, String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.Download(String, String, String)
  name.vb: Download(String, String, String)
- uid: Innovt.Cloud.File.IFileSystem.DownloadStream(System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.DownloadStream(System.String)
  id: DownloadStream(System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DownloadStream(string)
  nameWithType: IFileSystem.DownloadStream(string)
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStream(string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DownloadStream
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 40
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Downloads a file from the provided URL and returns the stream.
  example: []
  syntax:
    content: Stream DownloadStream(string url)
    parameters:
    - id: url
      type: System.String
    return:
      type: System.IO.Stream
    content.vb: Function DownloadStream(url As String) As Stream
  overload: Innovt.Cloud.File.IFileSystem.DownloadStream*
  nameWithType.vb: IFileSystem.DownloadStream(String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DownloadStream(String)
  name.vb: DownloadStream(String)
- uid: Innovt.Cloud.File.IFileSystem.DownloadStream(System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.DownloadStream(System.String,System.String)
  id: DownloadStream(System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DownloadStream(string, string)
  nameWithType: IFileSystem.DownloadStream(string, string)
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStream(string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DownloadStream
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 48
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Downloads a file from the specified bucket and file name synchronously and returns the stream.
  example: []
  syntax:
    content: Stream DownloadStream(string bucketName, string fileName)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: fileName
      type: System.String
      description: The name of the file to download.
    return:
      type: System.IO.Stream
      description: The stream of the downloaded file.
    content.vb: Function DownloadStream(bucketName As String, fileName As String) As Stream
  overload: Innovt.Cloud.File.IFileSystem.DownloadStream*
  nameWithType.vb: IFileSystem.DownloadStream(String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DownloadStream(String, String)
  name.vb: DownloadStream(String, String)
- uid: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.Threading.CancellationToken)
  id: DownloadStreamAsync(System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DownloadStreamAsync(string, CancellationToken)
  nameWithType: IFileSystem.DownloadStreamAsync(string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DownloadStreamAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 56
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Downloads a file from the provided URL asynchronously and returns the stream.
  example: []
  syntax:
    content: Task<Stream> DownloadStreamAsync(string url, CancellationToken cancellationToken = default)
    parameters:
    - id: url
      type: System.String
      description: The URL of the file to download.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: The stream of the downloaded file.
    content.vb: Function DownloadStreamAsync(url As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync*
  nameWithType.vb: IFileSystem.DownloadStreamAsync(String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(String, System.Threading.CancellationToken)
  name.vb: DownloadStreamAsync(String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(System.String,System.String,System.Threading.CancellationToken)
  id: DownloadStreamAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DownloadStreamAsync(string, string, CancellationToken)
  nameWithType: IFileSystem.DownloadStreamAsync(string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DownloadStreamAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 65
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Downloads a file from the specified bucket and file name asynchronously and returns the stream.
  example: []
  syntax:
    content: Task<Stream> DownloadStreamAsync(string bucketName, string fileName, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: fileName
      type: System.String
      description: The name of the file to download.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: The stream of the downloaded file.
    content.vb: Function DownloadStreamAsync(bucketName As String, fileName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync*
  nameWithType.vb: IFileSystem.DownloadStreamAsync(String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync(String, String, System.Threading.CancellationToken)
  name.vb: DownloadStreamAsync(String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl(System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl(System.String)
  id: ExtractBucketFromGetUrl(System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: ExtractBucketFromGetUrl(string)
  nameWithType: IFileSystem.ExtractBucketFromGetUrl(string)
  fullName: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl(string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ExtractBucketFromGetUrl
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 73
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Extracts the bucket name and file key from the provided URL.
  example: []
  syntax:
    content: (string bucket, string fileKey) ExtractBucketFromGetUrl(string bucketUrl)
    parameters:
    - id: bucketUrl
      type: System.String
      description: The URL containing bucket information.
    return:
      type: System.ValueTuple{System.String,System.String}
      description: A tuple containing the bucket name and file key.
    content.vb: Function ExtractBucketFromGetUrl(bucketUrl As String) As (bucket As String, fileKey As String)
  overload: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl*
  nameWithType.vb: IFileSystem.ExtractBucketFromGetUrl(String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl(String)
  name.vb: ExtractBucketFromGetUrl(String)
- uid: Innovt.Cloud.File.IFileSystem.FolderExists(System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.FolderExists(System.String,System.String)
  id: FolderExists(System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: FolderExists(string, string)
  nameWithType: IFileSystem.FolderExists(string, string)
  fullName: Innovt.Cloud.File.IFileSystem.FolderExists(string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FolderExists
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 81
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Checks if a folder exists in the specified bucket.
  example: []
  syntax:
    content: bool FolderExists(string bucketName, string key)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: key
      type: System.String
      description: The key of the folder.
    return:
      type: System.Boolean
      description: True if the folder exists; otherwise, false.
    content.vb: Function FolderExists(bucketName As String, key As String) As Boolean
  overload: Innovt.Cloud.File.IFileSystem.FolderExists*
  nameWithType.vb: IFileSystem.FolderExists(String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.FolderExists(String, String)
  name.vb: FolderExists(String, String)
- uid: Innovt.Cloud.File.IFileSystem.FolderExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.FolderExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FolderExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: FolderExistsAsync(string, string, CancellationToken)
  nameWithType: IFileSystem.FolderExistsAsync(string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.FolderExistsAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FolderExistsAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 90
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Checks if a folder exists in the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<bool> FolderExistsAsync(string bucketName, string key, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: key
      type: System.String
      description: The key of the folder.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the folder exists; otherwise, false.
    content.vb: Function FolderExistsAsync(bucketName As String, key As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Innovt.Cloud.File.IFileSystem.FolderExistsAsync*
  nameWithType.vb: IFileSystem.FolderExistsAsync(String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.FolderExistsAsync(String, String, System.Threading.CancellationToken)
  name.vb: FolderExistsAsync(String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.FileExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.FileExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FileExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: FileExistsAsync(string, string, CancellationToken)
  nameWithType: IFileSystem.FileExistsAsync(string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.FileExistsAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FileExistsAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 99
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Checks if a file exists in the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<bool> FileExistsAsync(string bucketName, string key, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: key
      type: System.String
      description: The key of the file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the file exists; otherwise, false.
    content.vb: Function FileExistsAsync(bucketName As String, key As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Innovt.Cloud.File.IFileSystem.FileExistsAsync*
  nameWithType.vb: IFileSystem.FileExistsAsync(String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.FileExistsAsync(String, String, System.Threading.CancellationToken)
  name.vb: FileExistsAsync(String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl(System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl(System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: GeneratePreSignedUrl(System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: GeneratePreSignedUrl(string, string, DateTime, IDictionary<string, object>)
  nameWithType: IFileSystem.GeneratePreSignedUrl(string, string, DateTime, IDictionary<string, object>)
  fullName: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl(string, string, System.DateTime, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GeneratePreSignedUrl
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 110
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Generates a pre-signed URL for accessing the object in the specified bucket.
  example: []
  syntax:
    content: string GeneratePreSignedUrl(string bucketName, string key, DateTime expiration, IDictionary<string, object> additionalProperties)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: key
      type: System.String
      description: The key of the object.
    - id: expiration
      type: System.DateTime
      description: The expiration date and time for the pre-signed URL.
    - id: additionalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Additional properties for customizing the URL generation.
    return:
      type: System.String
      description: The pre-signed URL for accessing the object.
    content.vb: Function GeneratePreSignedUrl(bucketName As String, key As String, expiration As Date, additionalProperties As IDictionary(Of String, Object)) As String
  overload: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl*
  nameWithType.vb: IFileSystem.GeneratePreSignedUrl(String, String, Date, IDictionary(Of String, Object))
  fullName.vb: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl(String, String, Date, System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: GeneratePreSignedUrl(String, String, Date, IDictionary(Of String, Object))
- uid: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl(System.String,System.String,System.DateTime)
  commentId: M:Innovt.Cloud.File.IFileSystem.GetPreSignedUrl(System.String,System.String,System.DateTime)
  id: GetPreSignedUrl(System.String,System.String,System.DateTime)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: GetPreSignedUrl(string, string, DateTime)
  nameWithType: IFileSystem.GetPreSignedUrl(string, string, DateTime)
  fullName: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl(string, string, System.DateTime)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetPreSignedUrl
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 121
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Gets a pre-signed URL for accessing the object in the specified bucket.
  example: []
  syntax:
    content: string GetPreSignedUrl(string bucketName, string key, DateTime expires)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: key
      type: System.String
      description: The key of the object.
    - id: expires
      type: System.DateTime
      description: The expiration date and time for the pre-signed URL.
    return:
      type: System.String
      description: The pre-signed URL for accessing the object.
    content.vb: Function GetPreSignedUrl(bucketName As String, key As String, expires As Date) As String
  overload: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl*
  nameWithType.vb: IFileSystem.GetPreSignedUrl(String, String, Date)
  fullName.vb: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl(String, String, Date)
  name.vb: GetPreSignedUrl(String, String, Date)
- uid: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)
  id: GetObjectContentAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: GetObjectContentAsync(string, Encoding, CancellationToken)
  nameWithType: IFileSystem.GetObjectContentAsync(string, Encoding, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(string, System.Text.Encoding, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetObjectContentAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 130
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Gets the content of the object from the specified URL asynchronously.
  example: []
  syntax:
    content: Task<string> GetObjectContentAsync(string url, Encoding encoding, CancellationToken cancellationToken = default)
    parameters:
    - id: url
      type: System.String
      description: The URL of the object.
    - id: encoding
      type: System.Text.Encoding
      description: The encoding to use for reading the content.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The content of the object as a string.
    content.vb: Function GetObjectContentAsync(url As String, encoding As Encoding, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync*
  nameWithType.vb: IFileSystem.GetObjectContentAsync(String, Encoding, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(String, System.Text.Encoding, System.Threading.CancellationToken)
  name.vb: GetObjectContentAsync(String, Encoding, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  id: GetObjectContentAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: GetObjectContentAsync(string, string, Encoding, CancellationToken)
  nameWithType: IFileSystem.GetObjectContentAsync(string, string, Encoding, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(string, string, System.Text.Encoding, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetObjectContentAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 140
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Gets the content of the object from the specified URL asynchronously.
  example: []
  syntax:
    content: Task<string> GetObjectContentAsync(string bucketName, string key, Encoding encoding, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The Bucket name.
    - id: key
      type: System.String
      description: The file url
    - id: encoding
      type: System.Text.Encoding
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Function GetObjectContentAsync(bucketName As String, key As String, encoding As Encoding, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync*
  nameWithType.vb: IFileSystem.GetObjectContentAsync(String, String, Encoding, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync(String, String, System.Text.Encoding, System.Threading.CancellationToken)
  name.vb: GetObjectContentAsync(String, String, Encoding, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync``1(System.Uri,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync``1(System.Uri,System.Threading.CancellationToken)
  id: GetObjectFromJsonAsync``1(System.Uri,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: GetObjectFromJsonAsync<T>(Uri, CancellationToken)
  nameWithType: IFileSystem.GetObjectFromJsonAsync<T>(Uri, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync<T>(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetObjectFromJsonAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 150
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Deserializes a JSON object from the content of a file specified by a URI.
  example: []
  syntax:
    content: Task<T> GetObjectFromJsonAsync<T>(Uri filePath, CancellationToken cancellationToken = default)
    parameters:
    - id: filePath
      type: System.Uri
      description: The URI pointing to the JSON file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: The type of the object to deserialize to.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The deserialized object of type <code class="typeparamref">T</code>.
    content.vb: Function GetObjectFromJsonAsync(Of T)(filePath As Uri, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync*
  nameWithType.vb: IFileSystem.GetObjectFromJsonAsync(Of T)(Uri, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync(Of T)(System.Uri, System.Threading.CancellationToken)
  name.vb: GetObjectFromJsonAsync(Of T)(Uri, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.IO.Stream,System.String,System.String,System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.IO.Stream,System.String,System.String,System.String,System.String)
  id: PutObject(System.String,System.IO.Stream,System.String,System.String,System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: PutObject(string, Stream, string, string, string, string)
  nameWithType: IFileSystem.PutObject(string, Stream, string, string, string, string)
  fullName: Innovt.Cloud.File.IFileSystem.PutObject(string, System.IO.Stream, string, string, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: PutObject
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 155
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads a file from a stream to the specified bucket.
  example: []
  syntax:
    content: string PutObject(string bucketName, Stream stream, string fileName, string contentType = null, string serverSideEncryptionMethod = null, string fileAcl = null)
    parameters:
    - id: bucketName
      type: System.String
    - id: stream
      type: System.IO.Stream
    - id: fileName
      type: System.String
    - id: contentType
      type: System.String
    - id: serverSideEncryptionMethod
      type: System.String
    - id: fileAcl
      type: System.String
    return:
      type: System.String
    content.vb: Function PutObject(bucketName As String, stream As Stream, fileName As String, contentType As String = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing) As String
  overload: Innovt.Cloud.File.IFileSystem.PutObject*
  nameWithType.vb: IFileSystem.PutObject(String, Stream, String, String, String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.PutObject(String, System.IO.Stream, String, String, String, String)
  name.vb: PutObject(String, Stream, String, String, String, String)
- uid: Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.String,System.String,System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.PutObject(System.String,System.String,System.String,System.String,System.String)
  id: PutObject(System.String,System.String,System.String,System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: PutObject(string, string, string, string, string)
  nameWithType: IFileSystem.PutObject(string, string, string, string, string)
  fullName: Innovt.Cloud.File.IFileSystem.PutObject(string, string, string, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: PutObject
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 161
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads a file from a local file path to the specified bucket.
  example: []
  syntax:
    content: string PutObject(string bucketName, string filePath, string contentType = null, string serverSideEncryptionMethod = null, string fileAcl = null)
    parameters:
    - id: bucketName
      type: System.String
    - id: filePath
      type: System.String
    - id: contentType
      type: System.String
    - id: serverSideEncryptionMethod
      type: System.String
    - id: fileAcl
      type: System.String
    return:
      type: System.String
    content.vb: Function PutObject(bucketName As String, filePath As String, contentType As String = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing) As String
  overload: Innovt.Cloud.File.IFileSystem.PutObject*
  nameWithType.vb: IFileSystem.PutObject(String, String, String, String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.PutObject(String, String, String, String, String)
  name.vb: PutObject(String, String, String, String, String)
- uid: Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.IO.Stream,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.IO.Stream,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: PutObjectAsync(System.String,System.IO.Stream,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: PutObjectAsync(string, Stream, string, string, string, string, CancellationToken)
  nameWithType: IFileSystem.PutObjectAsync(string, Stream, string, string, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.PutObjectAsync(string, System.IO.Stream, string, string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: PutObjectAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 175
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a stream to the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<string> PutObjectAsync(string bucketName, Stream stream, string fileName, string contentType = null, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: stream
      type: System.IO.Stream
      description: The stream containing the object to upload.
    - id: fileName
      type: System.String
      description: The name of the file to upload.
    - id: contentType
      type: System.String
      description: The content type of the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The unique identifier of the uploaded object.
    content.vb: Function PutObjectAsync(bucketName As String, stream As Stream, fileName As String, contentType As String = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.PutObjectAsync*
  nameWithType.vb: IFileSystem.PutObjectAsync(String, Stream, String, String, String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.PutObjectAsync(String, System.IO.Stream, String, String, String, String, System.Threading.CancellationToken)
  name.vb: PutObjectAsync(String, Stream, String, String, String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.PutObjectAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: PutObjectAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: PutObjectAsync(string, string, string, string, string, CancellationToken)
  nameWithType: IFileSystem.PutObjectAsync(string, string, string, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.PutObjectAsync(string, string, string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: PutObjectAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 188
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a local file to the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<string> PutObjectAsync(string bucketName, string filePath, string contentType = null, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: filePath
      type: System.String
      description: The local file path of the object to upload.
    - id: contentType
      type: System.String
      description: The content type of the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The unique identifier of the uploaded object.
    content.vb: Function PutObjectAsync(bucketName As String, filePath As String, contentType As String = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.PutObjectAsync*
  nameWithType.vb: IFileSystem.PutObjectAsync(String, String, String, String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.PutObjectAsync(String, String, String, String, String, System.Threading.CancellationToken)
  name.vb: PutObjectAsync(String, String, String, String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.Upload(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.Upload(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  id: Upload(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: Upload(string, Stream, string, IList<KeyValuePair<string, string>>, string, string)
  nameWithType: IFileSystem.Upload(string, Stream, string, IList<KeyValuePair<string, string>>, string, string)
  fullName: Innovt.Cloud.File.IFileSystem.Upload(string, System.IO.Stream, string, System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Upload
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 201
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a stream to the specified bucket synchronously.
  example: []
  syntax:
    content: string Upload(string bucketName, Stream stream, string fileName, IList<KeyValuePair<string, string>> metadata = null, string serverSideEncryptionMethod = null, string fileAcl = null)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: stream
      type: System.IO.Stream
      description: The stream containing the object to upload.
    - id: fileName
      type: System.String
      description: The name of the file to upload.
    - id: metadata
      type: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Metadata for the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    return:
      type: System.String
      description: The unique identifier of the uploaded object.
    content.vb: Function Upload(bucketName As String, stream As Stream, fileName As String, metadata As IList(Of KeyValuePair(Of String, String)) = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing) As String
  overload: Innovt.Cloud.File.IFileSystem.Upload*
  nameWithType.vb: IFileSystem.Upload(String, Stream, String, IList(Of KeyValuePair(Of String, String)), String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.Upload(String, System.IO.Stream, String, System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String)), String, String)
  name.vb: Upload(String, Stream, String, IList(Of KeyValuePair(Of String, String)), String, String)
- uid: Innovt.Cloud.File.IFileSystem.Upload(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.Upload(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  id: Upload(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: Upload(string, string, IList<KeyValuePair<string, string>>, string, string)
  nameWithType: IFileSystem.Upload(string, string, IList<KeyValuePair<string, string>>, string, string)
  fullName: Innovt.Cloud.File.IFileSystem.Upload(string, string, System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Upload
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 214
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a local file to the specified bucket synchronously.
  example: []
  syntax:
    content: string Upload(string bucketName, string filePath, IList<KeyValuePair<string, string>> metadata = null, string serverSideEncryptionMethod = null, string fileAcl = null)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: filePath
      type: System.String
      description: The local file path of the object to upload.
    - id: metadata
      type: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Metadata for the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    return:
      type: System.String
      description: The unique identifier of the uploaded object.
    content.vb: Function Upload(bucketName As String, filePath As String, metadata As IList(Of KeyValuePair(Of String, String)) = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing) As String
  overload: Innovt.Cloud.File.IFileSystem.Upload*
  nameWithType.vb: IFileSystem.Upload(String, String, IList(Of KeyValuePair(Of String, String)), String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.Upload(String, String, System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String)), String, String)
  name.vb: Upload(String, String, IList(Of KeyValuePair(Of String, String)), String, String)
- uid: Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  id: UploadAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: UploadAsync(string, Stream, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  nameWithType: IFileSystem.UploadAsync(string, Stream, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.UploadAsync(string, System.IO.Stream, string, System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: UploadAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 229
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a stream to the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<string> UploadAsync(string bucketName, Stream stream, string fileName, IList<KeyValuePair<string, string>> metadata = null, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: stream
      type: System.IO.Stream
      description: The stream containing the object to upload.
    - id: fileName
      type: System.String
      description: The name of the file to upload.
    - id: metadata
      type: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Metadata for the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The unique identifier of the uploaded object.
    content.vb: Function UploadAsync(bucketName As String, stream As Stream, fileName As String, metadata As IList(Of KeyValuePair(Of String, String)) = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.UploadAsync*
  nameWithType.vb: IFileSystem.UploadAsync(String, Stream, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.UploadAsync(String, System.IO.Stream, String, System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String)), String, String, System.Threading.CancellationToken)
  name.vb: UploadAsync(String, Stream, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.UploadAsync(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  id: UploadAsync(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: UploadAsync(string, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  nameWithType: IFileSystem.UploadAsync(string, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.UploadAsync(string, string, System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: UploadAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 244
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object from a local file to the specified bucket asynchronously.
  example: []
  syntax:
    content: Task<string> UploadAsync(string bucketName, string filePath, IList<KeyValuePair<string, string>> metadata = null, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
      description: The name of the bucket.
    - id: filePath
      type: System.String
      description: The local file path of the object to upload.
    - id: metadata
      type: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Metadata for the object.
    - id: serverSideEncryptionMethod
      type: System.String
      description: The server-side encryption method to use.
    - id: fileAcl
      type: System.String
      description: The access control for the object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The unique identifier of the uploaded object.
    content.vb: Function UploadAsync(bucketName As String, filePath As String, metadata As IList(Of KeyValuePair(Of String, String)) = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.UploadAsync*
  nameWithType.vb: IFileSystem.UploadAsync(String, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.UploadAsync(String, String, System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String)), String, String, System.Threading.CancellationToken)
  name.vb: UploadAsync(String, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync``1(System.String,``0,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync``1(System.String,``0,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  id: UploadAsJsonAsync``1(System.String,``0,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: UploadAsJsonAsync<T>(string, T, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  nameWithType: IFileSystem.UploadAsJsonAsync<T>(string, T, string, IList<KeyValuePair<string, string>>, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync<T>(string, T, string, System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: UploadAsJsonAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 252
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads an object as JSON to the specified bucket.
  example: []
  syntax:
    content: Task<string> UploadAsJsonAsync<T>(string bucketName, T obj, string fileName, IList<KeyValuePair<string, string>> metadata = null, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
    - id: obj
      type: '{T}'
    - id: fileName
      type: System.String
    - id: metadata
      type: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    - id: serverSideEncryptionMethod
      type: System.String
    - id: fileAcl
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function UploadAsJsonAsync(Of T)(bucketName As String, obj As T, fileName As String, metadata As IList(Of KeyValuePair(Of String, String)) = Nothing, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync*
  nameWithType.vb: IFileSystem.UploadAsJsonAsync(Of T)(String, T, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync(Of T)(String, T, String, System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String)), String, String, System.Threading.CancellationToken)
  name.vb: UploadAsJsonAsync(Of T)(String, T, String, IList(Of KeyValuePair(Of String, String)), String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: UploadDirectoryAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: UploadDirectoryAsync(string, string, string, string, CancellationToken)
  nameWithType: IFileSystem.UploadDirectoryAsync(string, string, string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync(string, string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: UploadDirectoryAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 260
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Uploads all files in a directory to the specified bucket.
  example: []
  syntax:
    content: Task UploadDirectoryAsync(string bucketName, string directory, string serverSideEncryptionMethod = null, string fileAcl = null, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
    - id: directory
      type: System.String
    - id: serverSideEncryptionMethod
      type: System.String
    - id: fileAcl
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UploadDirectoryAsync(bucketName As String, directory As String, serverSideEncryptionMethod As String = Nothing, fileAcl As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync*
  nameWithType.vb: IFileSystem.UploadDirectoryAsync(String, String, String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync(String, String, String, String, System.Threading.CancellationToken)
  name.vb: UploadDirectoryAsync(String, String, String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Innovt.Cloud.File.IFileSystem.DeleteObjectAsync(System.String,System.String,System.Threading.CancellationToken)
  id: DeleteObjectAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DeleteObjectAsync(string, string, CancellationToken)
  nameWithType: IFileSystem.DeleteObjectAsync(string, string, CancellationToken)
  fullName: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeleteObjectAsync
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 267
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Deletes an object from the specified bucket.
  example: []
  syntax:
    content: Task<bool> DeleteObjectAsync(string bucketName, string key, CancellationToken cancellationToken = default)
    parameters:
    - id: bucketName
      type: System.String
    - id: key
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function DeleteObjectAsync(bucketName As String, key As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync*
  nameWithType.vb: IFileSystem.DeleteObjectAsync(String, String, CancellationToken)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync(String, String, System.Threading.CancellationToken)
  name.vb: DeleteObjectAsync(String, String, CancellationToken)
- uid: Innovt.Cloud.File.IFileSystem.DeleteObject(System.String,System.String)
  commentId: M:Innovt.Cloud.File.IFileSystem.DeleteObject(System.String,System.String)
  id: DeleteObject(System.String,System.String)
  parent: Innovt.Cloud.File.IFileSystem
  langs:
  - csharp
  - vb
  name: DeleteObject(string, string)
  nameWithType: IFileSystem.DeleteObject(string, string)
  fullName: Innovt.Cloud.File.IFileSystem.DeleteObject(string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Cloud/File/IFileSystem.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: DeleteObject
    path: ../src/Innovt.Cloud/File/IFileSystem.cs
    startLine: 272
  assemblies:
  - Innovt.Cloud
  namespace: Innovt.Cloud.File
  summary: Deletes an object from the specified bucket.
  example: []
  syntax:
    content: bool DeleteObject(string bucketName, string key)
    parameters:
    - id: bucketName
      type: System.String
    - id: key
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function DeleteObject(bucketName As String, key As String) As Boolean
  overload: Innovt.Cloud.File.IFileSystem.DeleteObject*
  nameWithType.vb: IFileSystem.DeleteObject(String, String)
  fullName.vb: Innovt.Cloud.File.IFileSystem.DeleteObject(String, String)
  name.vb: DeleteObject(String, String)
references:
- uid: Innovt.Cloud.File
  commentId: N:Innovt.Cloud.File
  href: Innovt.html
  name: Innovt.Cloud.File
  nameWithType: Innovt.Cloud.File
  fullName: Innovt.Cloud.File
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.File
    name: File
    href: Innovt.Cloud.File.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Cloud
    name: Cloud
    href: Innovt.Cloud.html
  - name: .
  - uid: Innovt.Cloud.File
    name: File
    href: Innovt.Cloud.File.html
- uid: System.Object.Innovt.Core.Utilities.Extensions.IsNull
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  parent: Innovt.Core.Utilities.Mapper.SimpleMapper
  definition: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions
  commentId: T:Innovt.Core.Utilities.Extensions
  parent: Innovt.Core.Utilities
  href: Innovt.Core.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Innovt.Core.Utilities.Extensions
- uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper
  commentId: T:Innovt.Core.Utilities.Mapper.SimpleMapper
  parent: Innovt.Core.Utilities.Mapper
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html
  name: SimpleMapper
  nameWithType: SimpleMapper
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper
- uid: Innovt.Core.Utilities
  commentId: N:Innovt.Core.Utilities
  href: Innovt.html
  name: Innovt.Core.Utilities
  nameWithType: Innovt.Core.Utilities
  fullName: Innovt.Core.Utilities
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
- uid: Innovt.Core.Utilities.Mapper
  commentId: N:Innovt.Core.Utilities.Mapper
  href: Innovt.html
  name: Innovt.Core.Utilities.Mapper
  nameWithType: Innovt.Core.Utilities.Mapper
  fullName: Innovt.Core.Utilities.Mapper
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
- uid: Innovt.Cloud.File.IFileSystem.CopyObject*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.CopyObject
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_CopyObject_System_String_System_String_System_String_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: CopyObject
  nameWithType: IFileSystem.CopyObject
  fullName: Innovt.Cloud.File.IFileSystem.CopyObject
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Innovt.Cloud.File.IFileSystem.Download*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.Download
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_Download_System_String_System_String_System_String_
  name: Download
  nameWithType: IFileSystem.Download
  fullName: Innovt.Cloud.File.IFileSystem.Download
- uid: Innovt.Cloud.File.IFileSystem.DownloadStream*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.DownloadStream
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_DownloadStream_System_String_
  name: DownloadStream
  nameWithType: IFileSystem.DownloadStream
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.DownloadStreamAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_DownloadStreamAsync_System_String_System_Threading_CancellationToken_
  name: DownloadStreamAsync
  nameWithType: IFileSystem.DownloadStreamAsync
  fullName: Innovt.Cloud.File.IFileSystem.DownloadStreamAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_ExtractBucketFromGetUrl_System_String_
  name: ExtractBucketFromGetUrl
  nameWithType: IFileSystem.ExtractBucketFromGetUrl
  fullName: Innovt.Cloud.File.IFileSystem.ExtractBucketFromGetUrl
- uid: System.ValueTuple{System.String,System.String}
  commentId: T:System.ValueTuple{System.String,System.String}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: (string bucket, string fileKey)
  nameWithType: (string bucket, string fileKey)
  fullName: (string bucket, string fileKey)
  nameWithType.vb: (bucket As String, fileKey As String)
  fullName.vb: (bucket As String, fileKey As String)
  name.vb: (bucket As String, fileKey As String)
  spec.csharp:
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.bucket
    name: bucket
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.bucket
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.fileKey
    name: fileKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.filekey
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.String,System.String}.bucket
    name: bucket
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.bucket
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.fileKey
    name: fileKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.string,system.string-.filekey
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Innovt.Cloud.File.IFileSystem.FolderExists*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.FolderExists
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_FolderExists_System_String_System_String_
  name: FolderExists
  nameWithType: IFileSystem.FolderExists
  fullName: Innovt.Cloud.File.IFileSystem.FolderExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Innovt.Cloud.File.IFileSystem.FolderExistsAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.FolderExistsAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_FolderExistsAsync_System_String_System_String_System_Threading_CancellationToken_
  name: FolderExistsAsync
  nameWithType: IFileSystem.FolderExistsAsync
  fullName: Innovt.Cloud.File.IFileSystem.FolderExistsAsync
- uid: Innovt.Cloud.File.IFileSystem.FileExistsAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.FileExistsAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_FileExistsAsync_System_String_System_String_System_Threading_CancellationToken_
  name: FileExistsAsync
  nameWithType: IFileSystem.FileExistsAsync
  fullName: Innovt.Cloud.File.IFileSystem.FileExistsAsync
- uid: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_GeneratePreSignedUrl_System_String_System_String_System_DateTime_System_Collections_Generic_IDictionary_System_String_System_Object__
  name: GeneratePreSignedUrl
  nameWithType: IFileSystem.GeneratePreSignedUrl
  fullName: Innovt.Cloud.File.IFileSystem.GeneratePreSignedUrl
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, object>
  nameWithType: IDictionary<string, object>
  fullName: System.Collections.Generic.IDictionary<string, object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.GetPreSignedUrl
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_GetPreSignedUrl_System_String_System_String_System_DateTime_
  name: GetPreSignedUrl
  nameWithType: IFileSystem.GetPreSignedUrl
  fullName: Innovt.Cloud.File.IFileSystem.GetPreSignedUrl
- uid: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.GetObjectContentAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_GetObjectContentAsync_System_String_System_Text_Encoding_System_Threading_CancellationToken_
  name: GetObjectContentAsync
  nameWithType: IFileSystem.GetObjectContentAsync
  fullName: Innovt.Cloud.File.IFileSystem.GetObjectContentAsync
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.encoding
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
- uid: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_GetObjectFromJsonAsync__1_System_Uri_System_Threading_CancellationToken_
  name: GetObjectFromJsonAsync
  nameWithType: IFileSystem.GetObjectFromJsonAsync
  fullName: Innovt.Cloud.File.IFileSystem.GetObjectFromJsonAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uri
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Cloud.File.IFileSystem.PutObject*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.PutObject
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_PutObject_System_String_System_IO_Stream_System_String_System_String_System_String_System_String_
  name: PutObject
  nameWithType: IFileSystem.PutObject
  fullName: Innovt.Cloud.File.IFileSystem.PutObject
- uid: Innovt.Cloud.File.IFileSystem.PutObjectAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.PutObjectAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_PutObjectAsync_System_String_System_IO_Stream_System_String_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: PutObjectAsync
  nameWithType: IFileSystem.PutObjectAsync
  fullName: Innovt.Cloud.File.IFileSystem.PutObjectAsync
- uid: Innovt.Cloud.File.IFileSystem.Upload*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.Upload
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_Upload_System_String_System_IO_Stream_System_String_System_Collections_Generic_IList_System_Collections_Generic_KeyValuePair_System_String_System_String___System_String_System_String_
  name: Upload
  nameWithType: IFileSystem.Upload
  fullName: Innovt.Cloud.File.IFileSystem.Upload
- uid: System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<KeyValuePair<string, string>>
  nameWithType: IList<KeyValuePair<string, string>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string, string>>
  nameWithType.vb: IList(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.KeyValuePair(Of String, String))
  name.vb: IList(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Cloud.File.IFileSystem.UploadAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.UploadAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_UploadAsync_System_String_System_IO_Stream_System_String_System_Collections_Generic_IList_System_Collections_Generic_KeyValuePair_System_String_System_String___System_String_System_String_System_Threading_CancellationToken_
  name: UploadAsync
  nameWithType: IFileSystem.UploadAsync
  fullName: Innovt.Cloud.File.IFileSystem.UploadAsync
- uid: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_UploadAsJsonAsync__1_System_String___0_System_String_System_Collections_Generic_IList_System_Collections_Generic_KeyValuePair_System_String_System_String___System_String_System_String_System_Threading_CancellationToken_
  name: UploadAsJsonAsync
  nameWithType: IFileSystem.UploadAsJsonAsync
  fullName: Innovt.Cloud.File.IFileSystem.UploadAsJsonAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_UploadDirectoryAsync_System_String_System_String_System_String_System_String_System_Threading_CancellationToken_
  name: UploadDirectoryAsync
  nameWithType: IFileSystem.UploadDirectoryAsync
  fullName: Innovt.Cloud.File.IFileSystem.UploadDirectoryAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.DeleteObjectAsync
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_DeleteObjectAsync_System_String_System_String_System_Threading_CancellationToken_
  name: DeleteObjectAsync
  nameWithType: IFileSystem.DeleteObjectAsync
  fullName: Innovt.Cloud.File.IFileSystem.DeleteObjectAsync
- uid: Innovt.Cloud.File.IFileSystem.DeleteObject*
  commentId: Overload:Innovt.Cloud.File.IFileSystem.DeleteObject
  href: Innovt.Cloud.File.IFileSystem.html#Innovt_Cloud_File_IFileSystem_DeleteObject_System_String_System_String_
  name: DeleteObject
  nameWithType: IFileSystem.DeleteObject
  fullName: Innovt.Cloud.File.IFileSystem.DeleteObject
