### YamlMime:ManagedReference
items:
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  commentId: T:Innovt.Data.EFCore.Repositories.RepositoryBase`1
  id: RepositoryBase`1
  parent: Innovt.Data.EFCore.Repositories
  children:
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(System.Collections.Generic.IEnumerable{`0})
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(`0)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(`0)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify(`0)
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(System.Collections.Generic.IEnumerable{`0})
  - Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>
  type: Class
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: RepositoryBase
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 22
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: >-
    Base repository providing common functionality for accessing and managing entities of type T.

    Implements the IRepository interface.
  example: []
  syntax:
    content: 'public class RepositoryBase<T> : IRepository<T> where T : class'
    typeParameters:
    - id: T
      description: The entity type.
    content.vb: Public Class RepositoryBase(Of T As Class) Implements IRepository(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Innovt.Data.EFCore.Repositories.GenericRepository`1
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Innovt.Core.Utilities.Extensions.IsNull
  - System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  - System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)
  id: '#ctor(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)'
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: RepositoryBase(IExtendedUnitOfWork)
  nameWithType: RepositoryBase<T>.RepositoryBase(IExtendedUnitOfWork)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.RepositoryBase(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)
  type: Constructor
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: .ctor
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 29
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Initializes a new instance of the <xref href="Innovt.Data.EFCore.Repositories.RepositoryBase%601" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public RepositoryBase(IExtendedUnitOfWork context)
    parameters:
    - id: context
      type: Innovt.Domain.Core.Repository.IExtendedUnitOfWork
      description: The extended unit of work context.
    content.vb: Public Sub New(context As IExtendedUnitOfWork)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the context parameter is null.
  nameWithType.vb: RepositoryBase(Of T).New(IExtendedUnitOfWork)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).New(Innovt.Domain.Core.Repository.IExtendedUnitOfWork)
  name.vb: New(IExtendedUnitOfWork)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context
  commentId: P:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context
  id: Context
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: RepositoryBase<T>.Context
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Context
  type: Property
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Context
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 37
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: The extended unit of work context for interacting with the database.
  example: []
  syntax:
    content: protected IExtendedUnitOfWork Context { get; }
    parameters: []
    return:
      type: Innovt.Domain.Core.Repository.IExtendedUnitOfWork
    content.vb: Protected ReadOnly Property Context As IExtendedUnitOfWork
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context*
  nameWithType.vb: RepositoryBase(Of T).Context
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Context
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(`0)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(`0)
  id: Add(`0)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: RepositoryBase<T>.Add(T)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Add
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 40
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Adds a single entity
  example: []
  syntax:
    content: public virtual void Add(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: ''
    content.vb: Public Overridable Sub Add(entity As T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.Add({T})
  nameWithType.vb: RepositoryBase(Of T).Add(T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Add(T)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryBase<T>.Add(IEnumerable<T>)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Add(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Add
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 46
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Adds multiple entities
  example: []
  syntax:
    content: public virtual void Add(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: Public Overridable Sub Add(entities As IEnumerable(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.Add(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: RepositoryBase(Of T).Add(IEnumerable(Of T))
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  id: AddAsync(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: AddAsync(IEnumerable<T>)
  nameWithType: RepositoryBase<T>.AddAsync(IEnumerable<T>)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.AddAsync(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 56
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously adds a collection of entities of type T to the repository.
  example: []
  syntax:
    content: public virtual Task AddAsync(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection of entities to add.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Public Overridable Function AddAsync(entities As IEnumerable(Of T)) As Task
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.AddAsync(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: RepositoryBase(Of T).AddAsync(IEnumerable(Of T))
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).AddAsync(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddAsync(IEnumerable(Of T))
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(`0)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync(`0)
  id: AddAsync(`0)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: AddAsync(T)
  nameWithType: RepositoryBase<T>.AddAsync(T)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.AddAsync(T)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AddAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 66
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously adds an entity of type T to the repository.
  example: []
  syntax:
    content: public virtual Task AddAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to add.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Public Overridable Function AddAsync(entity As T) As Task
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.AddAsync({T})
  nameWithType.vb: RepositoryBase(Of T).AddAsync(T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).AddAsync(T)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify(`0)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify(`0)
  id: Modify(`0)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Modify(T)
  nameWithType: RepositoryBase<T>.Modify(T)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Modify(T)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Modify
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 75
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Modifies an entity of type T in the repository.
  example: []
  syntax:
    content: public virtual void Modify(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to modify.
    content.vb: Public Overridable Sub Modify(entity As T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.Modify({T})
  nameWithType.vb: RepositoryBase(Of T).Modify(T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Modify(T)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(System.Collections.Generic.IEnumerable{`0})
  id: Remove(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Remove(IEnumerable<T>)
  nameWithType: RepositoryBase<T>.Remove(IEnumerable<T>)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Remove(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Remove
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 84
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Removes a collection of entities of type T from the repository.
  example: []
  syntax:
    content: public virtual void Remove(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection of entities to remove.
    content.vb: Public Overridable Sub Remove(entities As IEnumerable(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.Remove(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: RepositoryBase(Of T).Remove(IEnumerable(Of T))
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Remove(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Remove(IEnumerable(Of T))
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(`0)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove(`0)
  id: Remove(`0)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: RepositoryBase<T>.Remove(T)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Remove
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 93
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Removes an entity of type T from the repository.
  example: []
  syntax:
    content: public virtual void Remove(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to remove.
    content.vb: Public Overridable Sub Remove(entity As T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.Remove({T})
  nameWithType.vb: RepositoryBase(Of T).Remove(T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Remove(T)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  id: GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: GetFirstOrDefault(ISpecification<T>, Include?)
  nameWithType: RepositoryBase<T>.GetFirstOrDefault(ISpecification<T>, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetFirstOrDefault
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 104
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Gets the first or default entity of type T based on the provided specification.
  example: []
  syntax:
    content: public virtual T? GetFirstOrDefault(ISpecification<T> specification, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entity.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    return:
      type: '{T}'
      description: The first or default entity matching the specification.
    content.vb: Public Overridable Function GetFirstOrDefault(specification As ISpecification(Of T), includes As Include = Nothing) As T
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).GetFirstOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetFirstOrDefault(ISpecification(Of T), Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: GetFirstOrDefaultAsync(ISpecification<T>, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.GetFirstOrDefaultAsync(ISpecification<T>, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetFirstOrDefaultAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 118
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously gets the first or default entity of type T based on the provided specification.
  example: []
  syntax:
    content: public virtual Task<T?> GetFirstOrDefaultAsync(ISpecification<T> specification, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entity.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A task representing the asynchronous operation and the first or default entity matching the specification.
    content.vb: Public Overridable Function GetFirstOrDefaultAsync(specification As ISpecification(Of T), includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: GetSingleOrDefaultAsync(ISpecification<T>, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.GetSingleOrDefaultAsync(ISpecification<T>, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetSingleOrDefaultAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 134
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously gets the single or default entity of type T based on the provided specification.
  example: []
  syntax:
    content: public virtual Task<T?> GetSingleOrDefaultAsync(ISpecification<T> specification, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entity.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A task representing the asynchronous operation and the single or default entity matching the specification.
    content.vb: Public Overridable Function GetSingleOrDefaultAsync(specification As ISpecification(Of T), includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  id: GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: GetSingleOrDefault(ISpecification<T>, Include?)
  nameWithType: RepositoryBase<T>.GetSingleOrDefault(ISpecification<T>, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: GetSingleOrDefault
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 149
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Gets the single or default entity of type T based on the provided specification.
  example: []
  syntax:
    content: public virtual T? GetSingleOrDefault(ISpecification<T> specification, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entity.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    return:
      type: '{T}'
      description: The single or default entity matching the specification.
    content.vb: Public Overridable Function GetSingleOrDefault(specification As ISpecification(Of T), includes As Include = Nothing) As T
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).GetSingleOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetSingleOrDefault(ISpecification(Of T), Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  id: FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindBy(ISpecification<T>, Include?)
  nameWithType: RepositoryBase<T>.FindBy(ISpecification<T>, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 165
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Finds entities of type T based on the provided specification with optional sorting and pagination.
  example: []
  syntax:
    content: public virtual IEnumerable<T> FindBy(ISpecification<T> specification, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entities.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An enumerable of entities matching the specification with optional sorting.
    content.vb: Public Overridable Function FindBy(specification As ISpecification(Of T), includes As Include = Nothing) As IEnumerable(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindBy(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).FindBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(ISpecification(Of T), Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  id: FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?)
  nameWithType: RepositoryBase<T>.FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>?, bool, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 185
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Finds entities of type T based on the provided specification with optional sorting and pagination.
  example: []
  syntax:
    content: public virtual IEnumerable<T> FindBy<TKey>(ISpecification<T> specification, Expression<Func<T, TKey>>? orderBy = null, bool isOrderByDescending = false, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entities.
    - id: orderBy
      type: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
      description: The sorting key selector.
    - id: isOrderByDescending
      type: System.Boolean
      description: A flag indicating whether the sorting is in descending order.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    typeParameters:
    - id: TKey
      description: The type of the sorting key.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An enumerable of entities matching the specification with optional sorting.
    content.vb: Public Overridable Function FindBy(Of TKey)(specification As ISpecification(Of T), orderBy As Expression(Of Func(Of T, TKey)) = Nothing, isOrderByDescending As Boolean = False, includes As Include = Nothing) As IEnumerable(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindByAsync(ISpecification<T>, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.FindByAsync(ISpecification<T>, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 211
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously finds entities of type T based on the provided specification with optional sorting and pagination.
  example: []
  syntax:
    content: public virtual Task<IEnumerable<T>> FindByAsync(ISpecification<T> specification, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entities.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      description: A task representing the asynchronous operation and an enumerable of entities matching the specification.
    content.vb: Public Overridable Function FindByAsync(specification As ISpecification(Of T), includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).FindByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(ISpecification(Of T), Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>?, bool, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 237
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously finds entities of type T based on the provided specification with optional sorting and pagination.
  example: []
  syntax:
    content: public virtual Task<IEnumerable<T>> FindByAsync<TKey>(ISpecification<T> specification, Expression<Func<T, TKey>>? orderBy = null, bool isOrderByDescending = false, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entities.
    - id: orderBy
      type: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
      description: The sorting key selector.
    - id: isOrderByDescending
      type: System.Boolean
      description: A flag indicating whether the sorting is in descending order.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: TKey
      description: The type of the sorting key.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      description: >-
        A task representing the asynchronous operation and an enumerable of entities matching the specification with

        optional sorting.
    content.vb: Public Overridable Function FindByAsync(Of TKey)(specification As ISpecification(Of T), orderBy As Expression(Of Func(Of T, TKey)) = Nothing, isOrderByDescending As Boolean = False, includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  id: FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindPaginatedBy(ISpecification<T>, Include?)
  nameWithType: RepositoryBase<T>.FindPaginatedBy(ISpecification<T>, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindPaginatedBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 263
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Finds paginated entities of type T based on the provided specification.
  example: []
  syntax:
    content: public virtual PagedCollection<T> FindPaginatedBy(ISpecification<T> specification, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification used to filter the entities.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: The related entities to include in the query.
    return:
      type: Innovt.Core.Collections.PagedCollection{{T}}
      description: A paged collection of entities matching the specification.
    content.vb: Public Overridable Function FindPaginatedBy(specification As ISpecification(Of T), includes As Include = Nothing) As PagedCollection(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(ISpecification(Of T), Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  id: FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?)
  nameWithType: RepositoryBase<T>.FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>?, bool, Innovt.Domain.Core.Repository.Include?)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindPaginatedBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 287
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: >-
    Retrieves a paginated collection of entities based on the provided specification, with optional sorting and

    included navigation properties.
  example: []
  syntax:
    content: public virtual PagedCollection<T> FindPaginatedBy<TKey>(ISpecification<T> specification, Expression<Func<T, TKey>>? orderBy = null, bool isOrderByDescending = false, Include? includes = null)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification to filter the entities.
    - id: orderBy
      type: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
      description: Expression to order the results (optional).
    - id: isOrderByDescending
      type: System.Boolean
      description: 'Flag to determine descending order for sorting (default: ascending).'
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: Navigation properties to include (optional).
    typeParameters:
    - id: TKey
      description: The type of the key used for sorting.
    return:
      type: Innovt.Core.Collections.PagedCollection{{T}}
      description: A paged collection of entities satisfying the specified criteria.
    content.vb: Public Overridable Function FindPaginatedBy(Of TKey)(specification As ISpecification(Of T), orderBy As Expression(Of Func(Of T, TKey)) = Nothing, isOrderByDescending As Boolean = False, includes As Include = Nothing) As PagedCollection(Of T)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindPaginatedByAsync(ISpecification<T>, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.FindPaginatedByAsync(ISpecification<T>, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindPaginatedByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 314
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: >-
    Asynchronously retrieves a paginated collection of entities based on the provided specification, with optional

    included navigation properties.
  example: []
  syntax:
    content: public virtual Task<PagedCollection<T>> FindPaginatedByAsync(ISpecification<T> specification, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification to filter the entities.
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: Navigation properties to include (optional).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token (optional).
    return:
      type: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
      description: >-
        A task that represents the asynchronous operation, yielding a paged collection of entities satisfying the

        specified criteria.
    content.vb: Public Overridable Function FindPaginatedByAsync(specification As ISpecification(Of T), includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of PagedCollection(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  id: FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?, CancellationToken)
  nameWithType: RepositoryBase<T>.FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>?, bool, Include?, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>?, bool, Innovt.Domain.Core.Repository.Include?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: FindPaginatedByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 343
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: >-
    Asynchronously retrieves a paginated collection of entities based on the provided specification, with optional

    sorting and included navigation properties.
  example: []
  syntax:
    content: public virtual Task<PagedCollection<T>> FindPaginatedByAsync<TKey>(ISpecification<T> specification, Expression<Func<T, TKey>>? orderBy = null, bool isOrderByDescending = false, Include? includes = null, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification to filter the entities.
    - id: orderBy
      type: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
      description: Expression to order the results (optional).
    - id: isOrderByDescending
      type: System.Boolean
      description: 'Flag to determine descending order for sorting (default: ascending).'
    - id: includes
      type: Innovt.Domain.Core.Repository.Include
      description: Navigation properties to include (optional).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token (optional).
    typeParameters:
    - id: TKey
      description: The type of the key used for sorting.
    return:
      type: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
      description: >-
        A task that represents the asynchronous operation, yielding a paged collection of entities satisfying the

        specified criteria.
    content.vb: Public Overridable Function FindPaginatedByAsync(Of TKey)(specification As ISpecification(Of T), orderBy As Expression(Of Func(Of T, TKey)) = Nothing, isOrderByDescending As Boolean = False, includes As Include = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of PagedCollection(Of T))
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  id: CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: CountBy(ISpecification<T>)
  nameWithType: RepositoryBase<T>.CountBy(ISpecification<T>)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountBy(Innovt.Domain.Core.Specification.ISpecification<T>)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CountBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 365
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Counts the number of entities that satisfy the specified specification.
  example: []
  syntax:
    content: public virtual int CountBy(ISpecification<T> specification)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification to filter the entities.
    return:
      type: System.Int32
      description: The total count of entities satisfying the specified criteria.
    content.vb: Public Overridable Function CountBy(specification As ISpecification(Of T)) As Integer
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.CountBy(Innovt.Domain.Core.Specification.ISpecification{{T}})
  nameWithType.vb: RepositoryBase(Of T).CountBy(ISpecification(Of T))
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountBy(Innovt.Domain.Core.Specification.ISpecification(Of T))
  name.vb: CountBy(ISpecification(Of T))
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  id: CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: CountBy<TKEntity>(ISpecification<TKEntity>)
  nameWithType: RepositoryBase<T>.CountBy<TKEntity>(ISpecification<TKEntity>)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountBy<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CountBy
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 378
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Counts the number of entities of a specified type that satisfy the specified specification.
  example: []
  syntax:
    content: 'public virtual int CountBy<TKEntity>(ISpecification<TKEntity> specification) where TKEntity : class'
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{TKEntity}}
      description: The specification to filter the entities.
    typeParameters:
    - id: TKEntity
      description: The type of the entity to count.
    return:
      type: System.Int32
      description: The total count of entities satisfying the specified criteria.
    content.vb: Public Overridable Function CountBy(Of TKEntity As Class)(specification As ISpecification(Of TKEntity)) As Integer
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{{TKEntity}})
  nameWithType.vb: RepositoryBase(Of T).CountBy(Of TKEntity)(ISpecification(Of TKEntity))
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountBy(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity))
  name.vb: CountBy(Of TKEntity)(ISpecification(Of TKEntity))
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  id: CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  nameWithType: RepositoryBase<T>.CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountByAsync<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CountByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 395
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously counts the number of entities of a specified type that satisfy the specified specification.
  example: []
  syntax:
    content: 'public virtual Task<int> CountByAsync<TKEntity>(ISpecification<TKEntity> specification, CancellationToken cancellationToken = default) where TKEntity : class'
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{TKEntity}}
      description: The specification to filter the entities.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token (optional).
    typeParameters:
    - id: TKEntity
      description: The type of the entity to count.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: >-
        A task that represents the asynchronous operation, yielding the total count of entities satisfying the

        specified criteria.
    content.vb: Public Overridable Function CountByAsync(Of TKEntity As Class)(specification As ISpecification(Of TKEntity), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{TKEntity}},System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountByAsync(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity), System.Threading.CancellationToken)
  name.vb: CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  commentId: M:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  id: CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  parent: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: CountByAsync(ISpecification<T>, CancellationToken)
  nameWithType: RepositoryBase<T>.CountByAsync(ISpecification<T>, CancellationToken)
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: CountByAsync
    path: ../src/Innovt.Data.EFCore/Repositories/RepositoryBase.cs
    startLine: 413
  assemblies:
  - Innovt.Data.EFCore
  namespace: Innovt.Data.EFCore.Repositories
  summary: Asynchronously counts the number of entities that satisfy the specified specification.
  example: []
  syntax:
    content: public Task<int> CountByAsync(ISpecification<T> specification, CancellationToken cancellationToken = default)
    parameters:
    - id: specification
      type: Innovt.Domain.Core.Specification.ISpecification{{T}}
      description: The specification to filter the entities.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token (optional).
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: >-
        A task that represents the asynchronous operation, yielding the total count of entities satisfying the

        specified criteria.
    content.vb: Public Function CountByAsync(specification As ISpecification(Of T), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync*
  implements:
  - Innovt.Domain.Core.Repository.IRepository{{T}}.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Threading.CancellationToken)
  nameWithType.vb: RepositoryBase(Of T).CountByAsync(ISpecification(Of T), CancellationToken)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Threading.CancellationToken)
  name.vb: CountByAsync(ISpecification(Of T), CancellationToken)
references:
- uid: Innovt.Data.EFCore.Repositories
  commentId: N:Innovt.Data.EFCore.Repositories
  href: Innovt.html
  name: Innovt.Data.EFCore.Repositories
  nameWithType: Innovt.Data.EFCore.Repositories
  fullName: Innovt.Data.EFCore.Repositories
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Data
    name: Data
    href: Innovt.Data.html
  - name: .
  - uid: Innovt.Data.EFCore
    name: EFCore
    href: Innovt.Data.EFCore.html
  - name: .
  - uid: Innovt.Data.EFCore.Repositories
    name: Repositories
    href: Innovt.Data.EFCore.Repositories.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Data
    name: Data
    href: Innovt.Data.html
  - name: .
  - uid: Innovt.Data.EFCore
    name: EFCore
    href: Innovt.Data.EFCore.html
  - name: .
  - uid: Innovt.Data.EFCore.Repositories
    name: Repositories
    href: Innovt.Data.EFCore.Repositories.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}
  commentId: T:Innovt.Domain.Core.Repository.IRepository{`0}
  parent: Innovt.Domain.Core.Repository
  definition: Innovt.Domain.Core.Repository.IRepository`1
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: Innovt.Domain.Core.Repository.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1
    name: IRepository
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1
    name: IRepository
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.IsNull
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Extensions.ToStringOrDefault
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  parent: Innovt.Core.Utilities.Extensions
  definition: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  parent: Innovt.Core.Utilities.Mapper.SimpleMapper
  definition: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Innovt.Domain.Core.Repository.IRepository`1
  commentId: T:Innovt.Domain.Core.Repository.IRepository`1
  href: Innovt.Domain.Core.Repository.IRepository-1.html
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: Innovt.Domain.Core.Repository.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1
    name: IRepository
    href: Innovt.Domain.Core.Repository.IRepository-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1
    name: IRepository
    href: Innovt.Domain.Core.Repository.IRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository
  commentId: N:Innovt.Domain.Core.Repository
  href: Innovt.html
  name: Innovt.Domain.Core.Repository
  nameWithType: Innovt.Domain.Core.Repository
  fullName: Innovt.Domain.Core.Repository
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Repository
    name: Repository
    href: Innovt.Domain.Core.Repository.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Repository
    name: Repository
    href: Innovt.Domain.Core.Repository.html
- uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.IsNull(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: Extensions.IsNull(object)
  fullName: Innovt.Core.Utilities.Extensions.IsNull(object)
  nameWithType.vb: Extensions.IsNull(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.IsNull(System.Object)
    name: IsNull
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Extensions
  commentId: T:Innovt.Core.Utilities.Extensions
  parent: Innovt.Core.Utilities
  href: Innovt.Core.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Innovt.Core.Utilities.Extensions
- uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  commentId: M:Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  name: ToStringOrDefault(object)
  nameWithType: Extensions.ToStringOrDefault(object)
  fullName: Innovt.Core.Utilities.Extensions.ToStringOrDefault(object)
  nameWithType.vb: Extensions.ToStringOrDefault(Object)
  fullName.vb: Innovt.Core.Utilities.Extensions.ToStringOrDefault(Object)
  name.vb: ToStringOrDefault(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Extensions.ToStringOrDefault(System.Object)
    name: ToStringOrDefault
    href: Innovt.Core.Utilities.Extensions.html#Innovt_Core_Utilities_Extensions_ToStringOrDefault_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  commentId: M:Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
  isExternal: true
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  name: MapTo<T1>(object)
  nameWithType: SimpleMapper.MapTo<T1>(object)
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo<T1>(object)
  nameWithType.vb: SimpleMapper.MapTo(Of T1)(Object)
  fullName.vb: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo(Of T1)(Object)
  name.vb: MapTo(Of T1)(Object)
  spec.csharp:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: <
  - name: T1
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Innovt.Core.Utilities.Mapper.SimpleMapper.MapTo``1(System.Object)
    name: MapTo
    href: Innovt.Core.Utilities.Mapper.SimpleMapper.html#Innovt_Core_Utilities_Mapper_SimpleMapper_MapTo__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Innovt.Core.Utilities.Mapper.SimpleMapper
  commentId: T:Innovt.Core.Utilities.Mapper.SimpleMapper
  parent: Innovt.Core.Utilities.Mapper
  href: Innovt.Core.Utilities.Mapper.SimpleMapper.html
  name: SimpleMapper
  nameWithType: SimpleMapper
  fullName: Innovt.Core.Utilities.Mapper.SimpleMapper
- uid: Innovt.Core.Utilities
  commentId: N:Innovt.Core.Utilities
  href: Innovt.html
  name: Innovt.Core.Utilities
  nameWithType: Innovt.Core.Utilities
  fullName: Innovt.Core.Utilities
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
- uid: Innovt.Core.Utilities.Mapper
  commentId: N:Innovt.Core.Utilities.Mapper
  href: Innovt.html
  name: Innovt.Core.Utilities.Mapper
  nameWithType: Innovt.Core.Utilities.Mapper
  fullName: Innovt.Core.Utilities.Mapper
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  - name: .
  - uid: Innovt.Core.Utilities.Mapper
    name: Mapper
    href: Innovt.Core.Utilities.Mapper.html
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1
  commentId: T:Innovt.Data.EFCore.Repositories.RepositoryBase`1
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
  spec.csharp:
  - uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1
    name: RepositoryBase
    href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1
    name: RepositoryBase
    href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.#ctor
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1__ctor_Innovt_Domain_Core_Repository_IExtendedUnitOfWork_
  name: RepositoryBase
  nameWithType: RepositoryBase<T>.RepositoryBase
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.RepositoryBase
  nameWithType.vb: RepositoryBase(Of T).New
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).New
  name.vb: New
- uid: Innovt.Domain.Core.Repository.IExtendedUnitOfWork
  commentId: T:Innovt.Domain.Core.Repository.IExtendedUnitOfWork
  parent: Innovt.Domain.Core.Repository
  href: Innovt.Domain.Core.Repository.IExtendedUnitOfWork.html
  name: IExtendedUnitOfWork
  nameWithType: IExtendedUnitOfWork
  fullName: Innovt.Domain.Core.Repository.IExtendedUnitOfWork
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Context
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_Context
  name: Context
  nameWithType: RepositoryBase<T>.Context
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Context
  nameWithType.vb: RepositoryBase(Of T).Context
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Context
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Add
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_Add__0_
  name: Add
  nameWithType: RepositoryBase<T>.Add
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Add
  nameWithType.vb: RepositoryBase(Of T).Add
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Add
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.Add({T})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.Add(`0)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.Add(`0)
  name: Add(T)
  nameWithType: IRepository<T>.Add(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Add(T)
  nameWithType.vb: IRepository(Of T).Add(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Add(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Innovt.Domain.Core.Repository.IRepository`1.Add(`0)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.Add(`0)
  name: Add(T)
  nameWithType: IRepository<T>.Add(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Add(T)
  nameWithType.vb: IRepository(Of T).Add(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Add(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.Add(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.Add(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.Add(System.Collections.Generic.IEnumerable{`0})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Add(IEnumerable<T>)
  nameWithType: IRepository<T>.Add(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).Add(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Add(IEnumerable<T>)
  nameWithType: IRepository<T>.Add(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).Add(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.AddAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_AddAsync_System_Collections_Generic_IEnumerable__0__
  name: AddAsync
  nameWithType: RepositoryBase<T>.AddAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.AddAsync
  nameWithType.vb: RepositoryBase(Of T).AddAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).AddAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.AddAsync(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: AddAsync(IEnumerable<T>)
  nameWithType: IRepository<T>.AddAsync(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.AddAsync(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).AddAsync(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).AddAsync(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddAsync(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(System.Collections.Generic.IEnumerable{`0})
    name: AddAsync
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(System.Collections.Generic.IEnumerable{`0})
    name: AddAsync
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: AddAsync(IEnumerable<T>)
  nameWithType: IRepository<T>.AddAsync(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.AddAsync(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).AddAsync(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).AddAsync(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddAsync(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
    name: AddAsync
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0})
    name: AddAsync
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.AddAsync({T})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(`0)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(`0)
  name: AddAsync(T)
  nameWithType: IRepository<T>.AddAsync(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.AddAsync(T)
  nameWithType.vb: IRepository(Of T).AddAsync(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).AddAsync(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(`0)
    name: AddAsync
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.AddAsync(`0)
    name: AddAsync
  - name: (
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(`0)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.AddAsync(`0)
  name: AddAsync(T)
  nameWithType: IRepository<T>.AddAsync(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.AddAsync(T)
  nameWithType.vb: IRepository(Of T).AddAsync(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).AddAsync(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(`0)
    name: AddAsync
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.AddAsync(`0)
    name: AddAsync
  - name: (
  - name: T
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Modify
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_Modify__0_
  name: Modify
  nameWithType: RepositoryBase<T>.Modify
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Modify
  nameWithType.vb: RepositoryBase(Of T).Modify
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Modify
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.Modify({T})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.Modify(`0)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.Modify(`0)
  name: Modify(T)
  nameWithType: IRepository<T>.Modify(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Modify(T)
  nameWithType.vb: IRepository(Of T).Modify(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Modify(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Modify(`0)
    name: Modify
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Modify(`0)
    name: Modify
  - name: (
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.Modify(`0)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.Modify(`0)
  name: Modify(T)
  nameWithType: IRepository<T>.Modify(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Modify(T)
  nameWithType.vb: IRepository(Of T).Modify(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Modify(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Modify(`0)
    name: Modify
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Modify(`0)
    name: Modify
  - name: (
  - name: T
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.Remove
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_Remove_System_Collections_Generic_IEnumerable__0__
  name: Remove
  nameWithType: RepositoryBase<T>.Remove
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.Remove
  nameWithType.vb: RepositoryBase(Of T).Remove
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).Remove
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.Remove(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.Remove(System.Collections.Generic.IEnumerable{`0})
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.Remove(System.Collections.Generic.IEnumerable{`0})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Remove(IEnumerable<T>)
  nameWithType: IRepository<T>.Remove(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Remove(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).Remove(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Remove(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Remove(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Remove(System.Collections.Generic.IEnumerable{`0})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Remove(System.Collections.Generic.IEnumerable{`0})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.Remove(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Remove(IEnumerable<T>)
  nameWithType: IRepository<T>.Remove(IEnumerable<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Remove(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepository(Of T).Remove(IEnumerable(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Remove(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Remove(IEnumerable(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(System.Collections.Generic.IEnumerable{`0})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(System.Collections.Generic.IEnumerable{`0})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.Remove({T})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.Remove(`0)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.Remove(`0)
  name: Remove(T)
  nameWithType: IRepository<T>.Remove(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Remove(T)
  nameWithType.vb: IRepository(Of T).Remove(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Remove(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(`0)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.Remove(`0)
  name: Remove(T)
  nameWithType: IRepository<T>.Remove(T)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.Remove(T)
  nameWithType.vb: IRepository(Of T).Remove(T)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).Remove(T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefault
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_GetFirstOrDefault_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_
  name: GetFirstOrDefault
  nameWithType: RepositoryBase<T>.GetFirstOrDefault
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetFirstOrDefault
  nameWithType.vb: RepositoryBase(Of T).GetFirstOrDefault
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetFirstOrDefault
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: GetFirstOrDefault(ISpecification<T>, Include)
  nameWithType: IRepository<T>.GetFirstOrDefault(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).GetFirstOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetFirstOrDefault(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetFirstOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetFirstOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Specification.ISpecification{{T}}
  commentId: T:Innovt.Domain.Core.Specification.ISpecification{``0}
  parent: Innovt.Domain.Core.Specification
  definition: Innovt.Domain.Core.Specification.ISpecification`1
  href: Innovt.Domain.Core.Specification.ISpecification-1.html
  name: ISpecification<T>
  nameWithType: ISpecification<T>
  fullName: Innovt.Domain.Core.Specification.ISpecification<T>
  nameWithType.vb: ISpecification(Of T)
  fullName.vb: Innovt.Domain.Core.Specification.ISpecification(Of T)
  name.vb: ISpecification(Of T)
  spec.csharp:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.Include
  commentId: T:Innovt.Domain.Core.Repository.Include
  parent: Innovt.Domain.Core.Repository
  href: Innovt.Domain.Core.Repository.Include.html
  name: Include
  nameWithType: Include
  fullName: Innovt.Domain.Core.Repository.Include
- uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: GetFirstOrDefault(ISpecification<T>, Include)
  nameWithType: IRepository<T>.GetFirstOrDefault(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).GetFirstOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetFirstOrDefault(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetFirstOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetFirstOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Specification.ISpecification`1
  commentId: T:Innovt.Domain.Core.Specification.ISpecification`1
  href: Innovt.Domain.Core.Specification.ISpecification-1.html
  name: ISpecification<TEntity>
  nameWithType: ISpecification<TEntity>
  fullName: Innovt.Domain.Core.Specification.ISpecification<TEntity>
  nameWithType.vb: ISpecification(Of TEntity)
  fullName.vb: Innovt.Domain.Core.Specification.ISpecification(Of TEntity)
  name.vb: ISpecification(Of TEntity)
  spec.csharp:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Innovt.Domain.Core.Specification
  commentId: N:Innovt.Domain.Core.Specification
  href: Innovt.html
  name: Innovt.Domain.Core.Specification
  nameWithType: Innovt.Domain.Core.Specification
  fullName: Innovt.Domain.Core.Specification
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Specification
    name: Specification
    href: Innovt.Domain.Core.Specification.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Specification
    name: Specification
    href: Innovt.Domain.Core.Specification.html
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetFirstOrDefaultAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_GetFirstOrDefaultAsync_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_System_Threading_CancellationToken_
  name: GetFirstOrDefaultAsync
  nameWithType: RepositoryBase<T>.GetFirstOrDefaultAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetFirstOrDefaultAsync
  nameWithType.vb: RepositoryBase(Of T).GetFirstOrDefaultAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetFirstOrDefaultAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetFirstOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.GetFirstOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetFirstOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetFirstOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetFirstOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.GetFirstOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetFirstOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetFirstOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetFirstOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetFirstOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefaultAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_GetSingleOrDefaultAsync_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_System_Threading_CancellationToken_
  name: GetSingleOrDefaultAsync
  nameWithType: RepositoryBase<T>.GetSingleOrDefaultAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetSingleOrDefaultAsync
  nameWithType.vb: RepositoryBase(Of T).GetSingleOrDefaultAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetSingleOrDefaultAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetSingleOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.GetSingleOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetSingleOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetSingleOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetSingleOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.GetSingleOrDefaultAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: GetSingleOrDefaultAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetSingleOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefaultAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: GetSingleOrDefaultAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.GetSingleOrDefault
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_GetSingleOrDefault_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_
  name: GetSingleOrDefault
  nameWithType: RepositoryBase<T>.GetSingleOrDefault
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.GetSingleOrDefault
  nameWithType.vb: RepositoryBase(Of T).GetSingleOrDefault
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).GetSingleOrDefault
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: GetSingleOrDefault(ISpecification<T>, Include)
  nameWithType: IRepository<T>.GetSingleOrDefault(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).GetSingleOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetSingleOrDefault(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetSingleOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetSingleOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: GetSingleOrDefault(ISpecification<T>, Include)
  nameWithType: IRepository<T>.GetSingleOrDefault(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).GetSingleOrDefault(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: GetSingleOrDefault(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetSingleOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.GetSingleOrDefault(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: GetSingleOrDefault
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindBy
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_FindBy_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_
  name: FindBy
  nameWithType: RepositoryBase<T>.FindBy
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindBy
  nameWithType.vb: RepositoryBase(Of T).FindBy
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindBy
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindBy(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: FindBy(ISpecification<T>, Include)
  nameWithType: IRepository<T>.FindBy(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: FindBy(ISpecification<T>, Include)
  nameWithType: IRepository<T>.FindBy(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  nameWithType: IRepository<T>.FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, TKey>>
  nameWithType: Expression<Func<T, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TKey>>
  nameWithType.vb: Expression(Of Func(Of T, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TKey))
  name.vb: Expression(Of Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  nameWithType: IRepository<T>.FindBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindByAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_FindByAsync_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_System_Threading_CancellationToken_
  name: FindByAsync
  nameWithType: RepositoryBase<T>.FindByAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindByAsync
  nameWithType.vb: RepositoryBase(Of T).FindByAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindByAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: FindByAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.FindByAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<T>>
  nameWithType: Task<IEnumerable<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Task(Of IEnumerable(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Task(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: FindByAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.FindByAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  nameWithType: IRepository<T>.FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  nameWithType: IRepository<T>.FindByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedBy
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_FindPaginatedBy_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_
  name: FindPaginatedBy
  nameWithType: RepositoryBase<T>.FindPaginatedBy
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedBy
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedBy
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedBy
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: FindPaginatedBy(ISpecification<T>, Include)
  nameWithType: IRepository<T>.FindPaginatedBy(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindPaginatedBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Core.Collections.PagedCollection{{T}}
  commentId: T:Innovt.Core.Collections.PagedCollection{`0}
  parent: Innovt.Core.Collections
  definition: Innovt.Core.Collections.PagedCollection`1
  href: Innovt.Core.Collections.PagedCollection-1.html
  name: PagedCollection<T>
  nameWithType: PagedCollection<T>
  fullName: Innovt.Core.Collections.PagedCollection<T>
  nameWithType.vb: PagedCollection(Of T)
  fullName.vb: Innovt.Core.Collections.PagedCollection(Of T)
  name.vb: PagedCollection(Of T)
  spec.csharp:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
  name: FindPaginatedBy(ISpecification<T>, Include)
  nameWithType: IRepository<T>.FindPaginatedBy(ISpecification<T>, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindPaginatedBy(ISpecification(Of T), Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(ISpecification(Of T), Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Core.Collections.PagedCollection`1
  commentId: T:Innovt.Core.Collections.PagedCollection`1
  href: Innovt.Core.Collections.PagedCollection-1.html
  name: PagedCollection<T>
  nameWithType: PagedCollection<T>
  fullName: Innovt.Core.Collections.PagedCollection<T>
  nameWithType.vb: PagedCollection(Of T)
  fullName.vb: Innovt.Core.Collections.PagedCollection(Of T)
  name.vb: PagedCollection(Of T)
  spec.csharp:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Innovt.Core.Collections
  commentId: N:Innovt.Core.Collections
  href: Innovt.html
  name: Innovt.Core.Collections
  nameWithType: Innovt.Core.Collections
  fullName: Innovt.Core.Collections
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Collections
    name: Collections
    href: Innovt.Core.Collections.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Collections
    name: Collections
    href: Innovt.Core.Collections.html
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  nameWithType: IRepository<T>.FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  nameWithType: IRepository<T>.FindPaginatedBy<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedBy<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include)
  nameWithType.vb: IRepository(Of T).FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedBy(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include)
  name.vb: FindPaginatedBy(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedBy``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include)
    name: FindPaginatedBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.FindPaginatedByAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_FindPaginatedByAsync_Innovt_Domain_Core_Specification_ISpecification__0__Innovt_Domain_Core_Repository_Include_System_Threading_CancellationToken_
  name: FindPaginatedByAsync
  nameWithType: RepositoryBase<T>.FindPaginatedByAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.FindPaginatedByAsync
  nameWithType.vb: RepositoryBase(Of T).FindPaginatedByAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).FindPaginatedByAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: FindPaginatedByAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.FindPaginatedByAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{{T}}}
  commentId: T:System.Threading.Tasks.Task{Innovt.Core.Collections.PagedCollection{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PagedCollection<T>>
  nameWithType: Task<PagedCollection<T>>
  fullName: System.Threading.Tasks.Task<Innovt.Core.Collections.PagedCollection<T>>
  nameWithType.vb: Task(Of PagedCollection(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Innovt.Core.Collections.PagedCollection(Of T))
  name.vb: Task(Of PagedCollection(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Innovt.Core.Collections.PagedCollection`1
    name: PagedCollection
    href: Innovt.Core.Collections.PagedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: FindPaginatedByAsync(ISpecification<T>, Include, CancellationToken)
  nameWithType: IRepository<T>.FindPaginatedByAsync(ISpecification<T>, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(ISpecification(Of T), Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  nameWithType: IRepository<T>.FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  nameWithType: IRepository<T>.FindPaginatedByAsync<TKey>(ISpecification<T>, Expression<Func<T, TKey>>, bool, Include, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.FindPaginatedByAsync<TKey>(Innovt.Domain.Core.Specification.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, bool, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).FindPaginatedByAsync(Of TKey)(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), Boolean, Innovt.Domain.Core.Repository.Include, System.Threading.CancellationToken)
  name.vb: FindPaginatedByAsync(Of TKey)(ISpecification(Of T), Expression(Of Func(Of T, TKey)), Boolean, Include, CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.FindPaginatedByAsync``1(Innovt.Domain.Core.Specification.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,Innovt.Domain.Core.Repository.Include,System.Threading.CancellationToken)
    name: FindPaginatedByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Innovt.Domain.Core.Repository.Include
    name: Include
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountBy
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_CountBy_Innovt_Domain_Core_Specification_ISpecification__0__
  name: CountBy
  nameWithType: RepositoryBase<T>.CountBy
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountBy
  nameWithType.vb: RepositoryBase(Of T).CountBy
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountBy
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.CountBy(Innovt.Domain.Core.Specification.ISpecification{{T}})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  name: CountBy(ISpecification<T>)
  nameWithType: IRepository<T>.CountBy(ISpecification<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountBy(Innovt.Domain.Core.Specification.ISpecification<T>)
  nameWithType.vb: IRepository(Of T).CountBy(ISpecification(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountBy(Innovt.Domain.Core.Specification.ISpecification(Of T))
  name.vb: CountBy(ISpecification(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
    name: CountBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
    name: CountBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
  name: CountBy(ISpecification<T>)
  nameWithType: IRepository<T>.CountBy(ISpecification<T>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountBy(Innovt.Domain.Core.Specification.ISpecification<T>)
  nameWithType.vb: IRepository(Of T).CountBy(ISpecification(Of T))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountBy(Innovt.Domain.Core.Specification.ISpecification(Of T))
  name.vb: CountBy(ISpecification(Of T))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
    name: CountBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy(Innovt.Domain.Core.Specification.ISpecification{`0})
    name: CountBy
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{{TKEntity}})
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  name: CountBy<TKEntity>(ISpecification<TKEntity>)
  nameWithType: IRepository<T>.CountBy<TKEntity>(ISpecification<TKEntity>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountBy<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>)
  nameWithType.vb: IRepository(Of T).CountBy(Of TKEntity)(ISpecification(Of TKEntity))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountBy(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity))
  name.vb: CountBy(Of TKEntity)(ISpecification(Of TKEntity))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
    name: CountBy
  - name: <
  - name: TKEntity
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: TKEntity
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
    name: CountBy
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Specification.ISpecification{{TKEntity}}
  commentId: T:Innovt.Domain.Core.Specification.ISpecification{``0}
  parent: Innovt.Domain.Core.Specification
  definition: Innovt.Domain.Core.Specification.ISpecification`1
  href: Innovt.Domain.Core.Specification.ISpecification-1.html
  name: ISpecification<TKEntity>
  nameWithType: ISpecification<TKEntity>
  fullName: Innovt.Domain.Core.Specification.ISpecification<TKEntity>
  nameWithType.vb: ISpecification(Of TKEntity)
  fullName.vb: Innovt.Domain.Core.Specification.ISpecification(Of TKEntity)
  name.vb: ISpecification(Of TKEntity)
  spec.csharp:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: <
  - name: TKEntity
  - name: '>'
  spec.vb:
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
    href: Innovt.Domain.Core.Specification.ISpecification-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
  name: CountBy<TKEntity>(ISpecification<TKEntity>)
  nameWithType: IRepository<T>.CountBy<TKEntity>(ISpecification<TKEntity>)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountBy<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>)
  nameWithType.vb: IRepository(Of T).CountBy(Of TKEntity)(ISpecification(Of TKEntity))
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountBy(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity))
  name.vb: CountBy(Of TKEntity)(ISpecification(Of TKEntity))
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
    name: CountBy
  - name: <
  - name: TKEntity
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: TKEntity
  - name: '>'
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountBy``1(Innovt.Domain.Core.Specification.ISpecification{``0})
    name: CountBy
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: )
- uid: Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync*
  commentId: Overload:Innovt.Data.EFCore.Repositories.RepositoryBase`1.CountByAsync
  href: Innovt.Data.EFCore.Repositories.RepositoryBase-1.html#Innovt_Data_EFCore_Repositories_RepositoryBase_1_CountByAsync__1_Innovt_Domain_Core_Specification_ISpecification___0__System_Threading_CancellationToken_
  name: CountByAsync
  nameWithType: RepositoryBase<T>.CountByAsync
  fullName: Innovt.Data.EFCore.Repositories.RepositoryBase<T>.CountByAsync
  nameWithType.vb: RepositoryBase(Of T).CountByAsync
  fullName.vb: Innovt.Data.EFCore.Repositories.RepositoryBase(Of T).CountByAsync
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{{TKEntity}},System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  nameWithType: IRepository<T>.CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountByAsync<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountByAsync(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity), System.Threading.CancellationToken)
  name.vb: CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: <
  - name: TKEntity
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: TKEntity
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  nameWithType: IRepository<T>.CountByAsync<TKEntity>(ISpecification<TKEntity>, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountByAsync<TKEntity>(Innovt.Domain.Core.Specification.ISpecification<TKEntity>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountByAsync(Of TKEntity)(Innovt.Domain.Core.Specification.ISpecification(Of TKEntity), System.Threading.CancellationToken)
  name.vb: CountByAsync(Of TKEntity)(ISpecification(Of TKEntity), CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: <
  - name: TKEntity
  - name: '>'
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: TKEntity
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync``1(Innovt.Domain.Core.Specification.ISpecification{``0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: TKEntity
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository{{T}}.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{{T}},System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  parent: Innovt.Domain.Core.Repository.IRepository{{T}}
  definition: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountByAsync(ISpecification<T>, CancellationToken)
  nameWithType: IRepository<T>.CountByAsync(ISpecification<T>, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).CountByAsync(ISpecification(Of T), CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Threading.CancellationToken)
  name.vb: CountByAsync(ISpecification(Of T), CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository{`0}.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  commentId: M:Innovt.Domain.Core.Repository.IRepository`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountByAsync(ISpecification<T>, CancellationToken)
  nameWithType: IRepository<T>.CountByAsync(ISpecification<T>, CancellationToken)
  fullName: Innovt.Domain.Core.Repository.IRepository<T>.CountByAsync(Innovt.Domain.Core.Specification.ISpecification<T>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of T).CountByAsync(ISpecification(Of T), CancellationToken)
  fullName.vb: Innovt.Domain.Core.Repository.IRepository(Of T).CountByAsync(Innovt.Domain.Core.Specification.ISpecification(Of T), System.Threading.CancellationToken)
  name.vb: CountByAsync(ISpecification(Of T), CancellationToken)
  spec.csharp:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Innovt.Domain.Core.Repository.IRepository`1.CountByAsync(Innovt.Domain.Core.Specification.ISpecification{`0},System.Threading.CancellationToken)
    name: CountByAsync
  - name: (
  - uid: Innovt.Domain.Core.Specification.ISpecification`1
    name: ISpecification
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
