### YamlMime:ManagedReference
items:
- uid: Innovt.Core.Utilities.Check
  commentId: T:Innovt.Core.Utilities.Check
  id: Check
  parent: Innovt.Core.Utilities
  children:
  - Innovt.Core.Utilities.Check.AreEqual(System.Decimal,System.Decimal,System.String)
  - Innovt.Core.Utilities.Check.AreEqual(System.Int32,System.Int32,System.String)
  - Innovt.Core.Utilities.Check.AreEqual(System.Int64,System.Int64,System.String)
  - Innovt.Core.Utilities.Check.AreEqual(System.String,System.String,System.String)
  - Innovt.Core.Utilities.Check.AreNotEqual(System.Int32,System.Int32,System.String)
  - Innovt.Core.Utilities.Check.AreNotEqual(System.Int64,System.Int64,System.String)
  - Innovt.Core.Utilities.Check.AreNotEqual(System.String,System.String,System.String)
  - Innovt.Core.Utilities.Check.NotEmpty(System.String,System.String)
  - Innovt.Core.Utilities.Check.NotEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)
  - Innovt.Core.Utilities.Check.NotLessThanZero(System.Int32,System.String)
  - Innovt.Core.Utilities.Check.NotLessThanZero(System.Nullable{System.Int32},System.String)
  - Innovt.Core.Utilities.Check.NotLessThanZero``1(``0[])
  - Innovt.Core.Utilities.Check.NotNullWithBusinessException``1(``0,System.String)
  - Innovt.Core.Utilities.Check.NotNullWithCriticalException``1(``0,System.String)
  - Innovt.Core.Utilities.Check.NotNull``1(``0,System.String)
  - Innovt.Core.Utilities.Check.NullButNotEmpty(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Check
  nameWithType: Check
  fullName: Innovt.Core.Utilities.Check
  type: Class
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Check
    path: Innovt.Core/Utilities/Check.cs
    startLine: 15
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: Provides static methods for checking arguments and values.
  example: []
  syntax:
    content: public static class Check
    content.vb: Public Module Check
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Innovt.Core.Utilities.Check.NotNull``1(``0,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotNull``1(``0,System.String)
  id: NotNull``1(``0,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotNull<T>(T, string)
  nameWithType: Check.NotNull<T>(T, string)
  fullName: Innovt.Core.Utilities.Check.NotNull<T>(T, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotNull
    path: Innovt.Core/Utilities/Check.cs
    startLine: 26
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: Checks if the specified value is not null; otherwise, throws an <xref href="System.ArgumentNullException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static T NotNull<T>(T value, string parameterName)
    parameters:
    - id: value
      type: '{T}'
      description: The value to check for null.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the value.
    typeParameters:
    - id: T
      description: The type of the value to check.
    return:
      type: '{T}'
      description: The original value if it is not null.
    content.vb: Public Shared Function NotNull(Of T)(value As T, parameterName As String) As T
  overload: Innovt.Core.Utilities.Check.NotNull*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the value is null.
  nameWithType.vb: Check.NotNull(Of T)(T, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotNull(Of T)(T, String)
  name.vb: NotNull(Of T)(T, String)
- uid: Innovt.Core.Utilities.Check.NotLessThanZero(System.Nullable{System.Int32},System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotLessThanZero(System.Nullable{System.Int32},System.String)
  id: NotLessThanZero(System.Nullable{System.Int32},System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotLessThanZero(int?, string)
  nameWithType: Check.NotLessThanZero(int?, string)
  fullName: Innovt.Core.Utilities.Check.NotLessThanZero(int?, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotLessThanZero
    path: Innovt.Core/Utilities/Check.cs
    startLine: 43
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified nullable integer value is greater than zero; otherwise, throws a

    <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int NotLessThanZero(int? value, string parameterName)
    parameters:
    - id: value
      type: System.Nullable{System.Int32}
      description: The nullable integer value to check.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the value.
    return:
      type: System.Int32
      description: Zero if the value is greater than zero.
    content.vb: Public Shared Function NotLessThanZero(value As Integer?, parameterName As String) As Integer
  overload: Innovt.Core.Utilities.Check.NotLessThanZero*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the value is less than or equal to zero.
  nameWithType.vb: Check.NotLessThanZero(Integer?, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotLessThanZero(Integer?, String)
  name.vb: NotLessThanZero(Integer?, String)
- uid: Innovt.Core.Utilities.Check.NotLessThanZero(System.Int32,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotLessThanZero(System.Int32,System.String)
  id: NotLessThanZero(System.Int32,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotLessThanZero(int, string)
  nameWithType: Check.NotLessThanZero(int, string)
  fullName: Innovt.Core.Utilities.Check.NotLessThanZero(int, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotLessThanZero
    path: Innovt.Core/Utilities/Check.cs
    startLine: 58
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: Checks if the specified integer value is greater than zero; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int NotLessThanZero(int value, string parameterName)
    parameters:
    - id: value
      type: System.Int32
      description: The integer value to check.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the value.
    return:
      type: System.Int32
      description: Zero if the value is greater than zero.
    content.vb: Public Shared Function NotLessThanZero(value As Integer, parameterName As String) As Integer
  overload: Innovt.Core.Utilities.Check.NotLessThanZero*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the value is less than or equal to zero.
  nameWithType.vb: Check.NotLessThanZero(Integer, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotLessThanZero(Integer, String)
  name.vb: NotLessThanZero(Integer, String)
- uid: Innovt.Core.Utilities.Check.NotLessThanZero``1(``0[])
  commentId: M:Innovt.Core.Utilities.Check.NotLessThanZero``1(``0[])
  id: NotLessThanZero``1(``0[])
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotLessThanZero<T>(params T[])
  nameWithType: Check.NotLessThanZero<T>(params T[])
  fullName: Innovt.Core.Utilities.Check.NotLessThanZero<T>(params T[])
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotLessThanZero
    path: Innovt.Core/Utilities/Check.cs
    startLine: 73
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified array of integers are greater than zero; otherwise, throws a

    <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void NotLessThanZero<T>(params T[] value)
    parameters:
    - id: value
      type: '{T}[]'
      description: The array of values to check.
    typeParameters:
    - id: T
      description: The type of the array elements, which must be convertible to an integer.
    content.vb: Public Shared Sub NotLessThanZero(Of T)(ParamArray value As T())
  overload: Innovt.Core.Utilities.Check.NotLessThanZero*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if any of the values is less than or equal to zero.
  nameWithType.vb: Check.NotLessThanZero(Of T)(ParamArray T())
  fullName.vb: Innovt.Core.Utilities.Check.NotLessThanZero(Of T)(ParamArray T())
  name.vb: NotLessThanZero(Of T)(ParamArray T())
- uid: Innovt.Core.Utilities.Check.NotNullWithBusinessException``1(``0,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotNullWithBusinessException``1(``0,System.String)
  id: NotNullWithBusinessException``1(``0,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotNullWithBusinessException<T>(T, string)
  nameWithType: Check.NotNullWithBusinessException<T>(T, string)
  fullName: Innovt.Core.Utilities.Check.NotNullWithBusinessException<T>(T, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotNullWithBusinessException
    path: Innovt.Core/Utilities/Check.cs
    startLine: 95
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified value is not null; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static T NotNullWithBusinessException<T>(T value, string message)
    parameters:
    - id: value
      type: '{T}'
      description: The value to check for null.
    - id: message
      type: System.String
      description: The message for the exception if the value is null.
    typeParameters:
    - id: T
      description: The type of the value to check.
    return:
      type: '{T}'
      description: The original value if it is not null.
    content.vb: Public Shared Function NotNullWithBusinessException(Of T)(value As T, message As String) As T
  overload: Innovt.Core.Utilities.Check.NotNullWithBusinessException*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the value is null, with the specified message.
  nameWithType.vb: Check.NotNullWithBusinessException(Of T)(T, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotNullWithBusinessException(Of T)(T, String)
  name.vb: NotNullWithBusinessException(Of T)(T, String)
- uid: Innovt.Core.Utilities.Check.NotNullWithCriticalException``1(``0,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotNullWithCriticalException``1(``0,System.String)
  id: NotNullWithCriticalException``1(``0,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotNullWithCriticalException<T>(T, string)
  nameWithType: Check.NotNullWithCriticalException<T>(T, string)
  fullName: Innovt.Core.Utilities.Check.NotNullWithCriticalException<T>(T, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotNullWithCriticalException
    path: Innovt.Core/Utilities/Check.cs
    startLine: 111
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified value is not null; otherwise, throws a <xref href="Innovt.Core.Exceptions.CriticalException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static T NotNullWithCriticalException<T>(T value, string message)
    parameters:
    - id: value
      type: '{T}'
      description: The value to check for null.
    - id: message
      type: System.String
      description: The message for the exception if the value is null.
    typeParameters:
    - id: T
      description: The type of the value to check.
    return:
      type: '{T}'
      description: The original value if it is not null.
    content.vb: Public Shared Function NotNullWithCriticalException(Of T)(value As T, message As String) As T
  overload: Innovt.Core.Utilities.Check.NotNullWithCriticalException*
  exceptions:
  - type: Innovt.Core.Exceptions.CriticalException
    commentId: T:Innovt.Core.Exceptions.CriticalException
    description: Thrown if the value is null, with the specified message.
  nameWithType.vb: Check.NotNullWithCriticalException(Of T)(T, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotNullWithCriticalException(Of T)(T, String)
  name.vb: NotNullWithCriticalException(Of T)(T, String)
- uid: Innovt.Core.Utilities.Check.AreEqual(System.String,System.String,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreEqual(System.String,System.String,System.String)
  id: AreEqual(System.String,System.String,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreEqual(string, string, string)
  nameWithType: Check.AreEqual(string, string, string)
  fullName: Innovt.Core.Utilities.Check.AreEqual(string, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 142
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two integer values are equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreEqual(string value, string value2, string message)
    parameters:
    - id: value
      type: System.String
      description: The first integer value to compare.
    - id: value2
      type: System.String
      description: The second integer value to compare.
    - id: message
      type: System.String
      description: The message for the exception if the values are not equal.
    content.vb: Public Shared Sub AreEqual(value As String, value2 As String, message As String)
  overload: Innovt.Core.Utilities.Check.AreEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the values are not equal, with the specified message.
  nameWithType.vb: Check.AreEqual(String, String, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreEqual(String, String, String)
  name.vb: AreEqual(String, String, String)
- uid: Innovt.Core.Utilities.Check.AreEqual(System.Int32,System.Int32,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreEqual(System.Int32,System.Int32,System.String)
  id: AreEqual(System.Int32,System.Int32,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreEqual(int, int, string)
  nameWithType: Check.AreEqual(int, int, string)
  fullName: Innovt.Core.Utilities.Check.AreEqual(int, int, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 155
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two long values are equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreEqual(int value, int value2, string message)
    parameters:
    - id: value
      type: System.Int32
      description: The first long value to compare.
    - id: value2
      type: System.Int32
      description: The second long value to compare.
    - id: message
      type: System.String
      description: The message for the exception if the values are not equal.
    content.vb: Public Shared Sub AreEqual(value As Integer, value2 As Integer, message As String)
  overload: Innovt.Core.Utilities.Check.AreEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the values are not equal, with the specified message.
  nameWithType.vb: Check.AreEqual(Integer, Integer, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreEqual(Integer, Integer, String)
  name.vb: AreEqual(Integer, Integer, String)
- uid: Innovt.Core.Utilities.Check.AreEqual(System.Int64,System.Int64,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreEqual(System.Int64,System.Int64,System.String)
  id: AreEqual(System.Int64,System.Int64,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreEqual(long, long, string)
  nameWithType: Check.AreEqual(long, long, string)
  fullName: Innovt.Core.Utilities.Check.AreEqual(long, long, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 168
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two decimal values are equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreEqual(long value, long value2, string message)
    parameters:
    - id: value
      type: System.Int64
      description: The first decimal value to compare.
    - id: value2
      type: System.Int64
      description: The second decimal value to compare.
    - id: message
      type: System.String
      description: The message for the exception if the values are not equal.
    content.vb: Public Shared Sub AreEqual(value As Long, value2 As Long, message As String)
  overload: Innovt.Core.Utilities.Check.AreEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the values are not equal, with the specified message.
  nameWithType.vb: Check.AreEqual(Long, Long, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreEqual(Long, Long, String)
  name.vb: AreEqual(Long, Long, String)
- uid: Innovt.Core.Utilities.Check.AreEqual(System.Decimal,System.Decimal,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreEqual(System.Decimal,System.Decimal,System.String)
  id: AreEqual(System.Decimal,System.Decimal,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreEqual(decimal, decimal, string)
  nameWithType: Check.AreEqual(decimal, decimal, string)
  fullName: Innovt.Core.Utilities.Check.AreEqual(decimal, decimal, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 181
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two decimal values are equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreEqual(decimal value, decimal value2, string message)
    parameters:
    - id: value
      type: System.Decimal
      description: The first decimal value to compare.
    - id: value2
      type: System.Decimal
      description: The second decimal value to compare.
    - id: message
      type: System.String
      description: The message to include in the exception if the values are not equal.
    content.vb: Public Shared Sub AreEqual(value As Decimal, value2 As Decimal, message As String)
  overload: Innovt.Core.Utilities.Check.AreEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the two decimal values are not equal.
  nameWithType.vb: Check.AreEqual(Decimal, Decimal, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreEqual(Decimal, Decimal, String)
  name.vb: AreEqual(Decimal, Decimal, String)
- uid: Innovt.Core.Utilities.Check.AreNotEqual(System.String,System.String,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreNotEqual(System.String,System.String,System.String)
  id: AreNotEqual(System.String,System.String,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreNotEqual(string, string, string)
  nameWithType: Check.AreNotEqual(string, string, string)
  fullName: Innovt.Core.Utilities.Check.AreNotEqual(string, string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreNotEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 197
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two strings are not equal while ignoring case sensitivity; otherwise, throws a

    <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified message.
  example: []
  syntax:
    content: public static void AreNotEqual(string value, string value2, string message)
    parameters:
    - id: value
      type: System.String
      description: The first string to compare.
    - id: value2
      type: System.String
      description: The second string to compare.
    - id: message
      type: System.String
      description: The message for the exception if the strings are equal.
    content.vb: Public Shared Sub AreNotEqual(value As String, value2 As String, message As String)
  overload: Innovt.Core.Utilities.Check.AreNotEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: >-
      Thrown if the strings are equal, ignoring case sensitivity, with the specified

      message.
  nameWithType.vb: Check.AreNotEqual(String, String, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreNotEqual(String, String, String)
  name.vb: AreNotEqual(String, String, String)
- uid: Innovt.Core.Utilities.Check.AreNotEqual(System.Int32,System.Int32,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreNotEqual(System.Int32,System.Int32,System.String)
  id: AreNotEqual(System.Int32,System.Int32,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreNotEqual(int, int, string)
  nameWithType: Check.AreNotEqual(int, int, string)
  fullName: Innovt.Core.Utilities.Check.AreNotEqual(int, int, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreNotEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 210
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two integer values are not equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreNotEqual(int value, int value2, string message)
    parameters:
    - id: value
      type: System.Int32
      description: The first integer value to compare.
    - id: value2
      type: System.Int32
      description: The second integer value to compare.
    - id: message
      type: System.String
      description: The message for the exception if the values are equal.
    content.vb: Public Shared Sub AreNotEqual(value As Integer, value2 As Integer, message As String)
  overload: Innovt.Core.Utilities.Check.AreNotEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the values are equal, with the specified message.
  nameWithType.vb: Check.AreNotEqual(Integer, Integer, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreNotEqual(Integer, Integer, String)
  name.vb: AreNotEqual(Integer, Integer, String)
- uid: Innovt.Core.Utilities.Check.AreNotEqual(System.Int64,System.Int64,System.String)
  commentId: M:Innovt.Core.Utilities.Check.AreNotEqual(System.Int64,System.Int64,System.String)
  id: AreNotEqual(System.Int64,System.Int64,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: AreNotEqual(long, long, string)
  nameWithType: Check.AreNotEqual(long, long, string)
  fullName: Innovt.Core.Utilities.Check.AreNotEqual(long, long, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: AreNotEqual
    path: Innovt.Core/Utilities/Check.cs
    startLine: 223
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if two long values are not equal; otherwise, throws a <xref href="Innovt.Core.Exceptions.BusinessException" data-throw-if-not-resolved="false"></xref> with the specified

    message.
  example: []
  syntax:
    content: public static void AreNotEqual(long value, long value2, string message)
    parameters:
    - id: value
      type: System.Int64
      description: The first long value to compare.
    - id: value2
      type: System.Int64
      description: The second long value to compare.
    - id: message
      type: System.String
      description: The message for the exception if the values are equal.
    content.vb: Public Shared Sub AreNotEqual(value As Long, value2 As Long, message As String)
  overload: Innovt.Core.Utilities.Check.AreNotEqual*
  exceptions:
  - type: Innovt.Core.Exceptions.BusinessException
    commentId: T:Innovt.Core.Exceptions.BusinessException
    description: Thrown if the values are equal, with the specified message.
  nameWithType.vb: Check.AreNotEqual(Long, Long, String)
  fullName.vb: Innovt.Core.Utilities.Check.AreNotEqual(Long, Long, String)
  name.vb: AreNotEqual(Long, Long, String)
- uid: Innovt.Core.Utilities.Check.NotEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)
  id: NotEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotEmpty<T>(IReadOnlyList<T>, string)
  nameWithType: Check.NotEmpty<T>(IReadOnlyList<T>, string)
  fullName: Innovt.Core.Utilities.Check.NotEmpty<T>(System.Collections.Generic.IReadOnlyList<T>, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotEmpty
    path: Innovt.Core/Utilities/Check.cs
    startLine: 238
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified collection is not null and not empty; otherwise, throws an <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>

    .
  example: []
  syntax:
    content: public static IReadOnlyList<T> NotEmpty<T>(IReadOnlyList<T> value, string parameterName)
    parameters:
    - id: value
      type: System.Collections.Generic.IReadOnlyList{{T}}
      description: The collection to check for null and emptiness.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the collection.
    typeParameters:
    - id: T
      description: The type of the collection elements.
    return:
      type: System.Collections.Generic.IReadOnlyList{{T}}
      description: The original collection if it is not null and not empty.
    content.vb: Public Shared Function NotEmpty(Of T)(value As IReadOnlyList(Of T), parameterName As String) As IReadOnlyList(Of T)
  overload: Innovt.Core.Utilities.Check.NotEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the collection is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the collection is empty.
  nameWithType.vb: Check.NotEmpty(Of T)(IReadOnlyList(Of T), String)
  fullName.vb: Innovt.Core.Utilities.Check.NotEmpty(Of T)(System.Collections.Generic.IReadOnlyList(Of T), String)
  name.vb: NotEmpty(Of T)(IReadOnlyList(Of T), String)
- uid: Innovt.Core.Utilities.Check.NotEmpty(System.String,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NotEmpty(System.String,System.String)
  id: NotEmpty(System.String,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NotEmpty(string, string)
  nameWithType: Check.NotEmpty(string, string)
  fullName: Innovt.Core.Utilities.Check.NotEmpty(string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NotEmpty
    path: Innovt.Core/Utilities/Check.cs
    startLine: 261
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: >-
    Checks if the specified string is not null and not empty; otherwise, throws an <xref href="System.ArgumentNullException" data-throw-if-not-resolved="false"></xref>

    or <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string NotEmpty(string value, string parameterName = null)
    parameters:
    - id: value
      type: System.String
      description: The string to check for null and emptiness.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the string.
    return:
      type: System.String
      description: The original string if it is not null and not empty.
    content.vb: Public Shared Function NotEmpty(value As String, parameterName As String = Nothing) As String
  overload: Innovt.Core.Utilities.Check.NotEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the string is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the string is empty.
  nameWithType.vb: Check.NotEmpty(String, String)
  fullName.vb: Innovt.Core.Utilities.Check.NotEmpty(String, String)
  name.vb: NotEmpty(String, String)
- uid: Innovt.Core.Utilities.Check.NullButNotEmpty(System.String,System.String)
  commentId: M:Innovt.Core.Utilities.Check.NullButNotEmpty(System.String,System.String)
  id: NullButNotEmpty(System.String,System.String)
  parent: Innovt.Core.Utilities.Check
  langs:
  - csharp
  - vb
  name: NullButNotEmpty(string, string)
  nameWithType: Check.NullButNotEmpty(string, string)
  fullName: Innovt.Core.Utilities.Check.NullButNotEmpty(string, string)
  type: Method
  source:
    remote:
      path: src/Innovt.Core/Utilities/Check.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: NullButNotEmpty
    path: Innovt.Core/Utilities/Check.cs
    startLine: 285
  assemblies:
  - Innovt.Core
  namespace: Innovt.Core.Utilities
  summary: Checks if the specified string is null but not empty; otherwise, throws an <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string NullButNotEmpty(string value, string parameterName)
    parameters:
    - id: value
      type: System.String
      description: The string to check for null but not emptiness.
    - id: parameterName
      type: System.String
      description: The name of the parameter associated with the string.
    return:
      type: System.String
      description: The original string if it is not null but not empty.
    content.vb: Public Shared Function NullButNotEmpty(value As String, parameterName As String) As String
  overload: Innovt.Core.Utilities.Check.NullButNotEmpty*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the string is null or empty.
  nameWithType.vb: Check.NullButNotEmpty(String, String)
  fullName.vb: Innovt.Core.Utilities.Check.NullButNotEmpty(String, String)
  name.vb: NullButNotEmpty(String, String)
references:
- uid: Innovt.Core.Utilities
  commentId: N:Innovt.Core.Utilities
  href: Innovt.html
  name: Innovt.Core.Utilities
  nameWithType: Innovt.Core.Utilities
  fullName: Innovt.Core.Utilities
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Utilities
    name: Utilities
    href: Innovt.Core.Utilities.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Innovt.Core.Utilities.Check.NotNull*
  commentId: Overload:Innovt.Core.Utilities.Check.NotNull
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NotNull__1___0_System_String_
  name: NotNull
  nameWithType: Check.NotNull
  fullName: Innovt.Core.Utilities.Check.NotNull
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Innovt.Core.Exceptions.BusinessException
  commentId: T:Innovt.Core.Exceptions.BusinessException
  parent: Innovt.Core.Exceptions
  href: Innovt.Core.Exceptions.BusinessException.html
  name: BusinessException
  nameWithType: BusinessException
  fullName: Innovt.Core.Exceptions.BusinessException
- uid: Innovt.Core.Utilities.Check.NotLessThanZero*
  commentId: Overload:Innovt.Core.Utilities.Check.NotLessThanZero
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NotLessThanZero_System_Nullable_System_Int32__System_String_
  name: NotLessThanZero
  nameWithType: Check.NotLessThanZero
  fullName: Innovt.Core.Utilities.Check.NotLessThanZero
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Innovt.Core.Exceptions
  commentId: N:Innovt.Core.Exceptions
  href: Innovt.html
  name: Innovt.Core.Exceptions
  nameWithType: Innovt.Core.Exceptions
  fullName: Innovt.Core.Exceptions
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Exceptions
    name: Exceptions
    href: Innovt.Core.Exceptions.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Core
    name: Core
    href: Innovt.Core.html
  - name: .
  - uid: Innovt.Core.Exceptions
    name: Exceptions
    href: Innovt.Core.Exceptions.html
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: Innovt.Core.Utilities.Check.NotNullWithBusinessException*
  commentId: Overload:Innovt.Core.Utilities.Check.NotNullWithBusinessException
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NotNullWithBusinessException__1___0_System_String_
  name: NotNullWithBusinessException
  nameWithType: Check.NotNullWithBusinessException
  fullName: Innovt.Core.Utilities.Check.NotNullWithBusinessException
- uid: Innovt.Core.Exceptions.CriticalException
  commentId: T:Innovt.Core.Exceptions.CriticalException
  parent: Innovt.Core.Exceptions
  href: Innovt.Core.Exceptions.CriticalException.html
  name: CriticalException
  nameWithType: CriticalException
  fullName: Innovt.Core.Exceptions.CriticalException
- uid: Innovt.Core.Utilities.Check.NotNullWithCriticalException*
  commentId: Overload:Innovt.Core.Utilities.Check.NotNullWithCriticalException
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NotNullWithCriticalException__1___0_System_String_
  name: NotNullWithCriticalException
  nameWithType: Check.NotNullWithCriticalException
  fullName: Innovt.Core.Utilities.Check.NotNullWithCriticalException
- uid: Innovt.Core.Utilities.Check.AreEqual*
  commentId: Overload:Innovt.Core.Utilities.Check.AreEqual
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_AreEqual_System_String_System_String_System_String_
  name: AreEqual
  nameWithType: Check.AreEqual
  fullName: Innovt.Core.Utilities.Check.AreEqual
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: Innovt.Core.Utilities.Check.AreNotEqual*
  commentId: Overload:Innovt.Core.Utilities.Check.AreNotEqual
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_AreNotEqual_System_String_System_String_System_String_
  name: AreNotEqual
  nameWithType: Check.AreNotEqual
  fullName: Innovt.Core.Utilities.Check.AreNotEqual
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Innovt.Core.Utilities.Check.NotEmpty*
  commentId: Overload:Innovt.Core.Utilities.Check.NotEmpty
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NotEmpty__1_System_Collections_Generic_IReadOnlyList___0__System_String_
  name: NotEmpty
  nameWithType: Check.NotEmpty
  fullName: Innovt.Core.Utilities.Check.NotEmpty
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Innovt.Core.Utilities.Check.NullButNotEmpty*
  commentId: Overload:Innovt.Core.Utilities.Check.NullButNotEmpty
  href: Innovt.Core.Utilities.Check.html#Innovt_Core_Utilities_Check_NullButNotEmpty_System_String_System_String_
  name: NullButNotEmpty
  nameWithType: Check.NullButNotEmpty
  fullName: Innovt.Core.Utilities.Check.NullButNotEmpty
