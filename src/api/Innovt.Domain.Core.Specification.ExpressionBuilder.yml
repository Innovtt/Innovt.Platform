### YamlMime:ManagedReference
items:
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder
  commentId: T:Innovt.Domain.Core.Specification.ExpressionBuilder
  id: ExpressionBuilder
  parent: Innovt.Domain.Core.Specification
  children:
  - Innovt.Domain.Core.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Innovt.Domain.Core.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - Innovt.Domain.Core.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  langs:
  - csharp
  - vb
  name: ExpressionBuilder
  nameWithType: ExpressionBuilder
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder
  type: Class
  source:
    remote:
      path: src/Innovt.Domain.Core/Specification/ExpressionBuilder.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: ExpressionBuilder
    path: Innovt.Domain.Core/Specification/ExpressionBuilder.cs
    startLine: 13
  assemblies:
  - Innovt.Domain.Core
  namespace: Innovt.Domain.Core.Specification
  summary: Extension methods for adding AND and OR with parameters rebinder
  example: []
  syntax:
    content: public static class ExpressionBuilder
    content.vb: Public Module ExpressionBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:Innovt.Domain.Core.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  id: Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  isExtensionMethod: true
  parent: Innovt.Domain.Core.Specification.ExpressionBuilder
  langs:
  - csharp
  - vb
  name: Compose<T>(Expression<T>, Expression<T>, Func<Expression, Expression, Expression>)
  nameWithType: ExpressionBuilder.Compose<T>(Expression<T>, Expression<T>, Func<Expression, Expression, Expression>)
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose<T>(System.Linq.Expressions.Expression<T>, System.Linq.Expressions.Expression<T>, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/Innovt.Domain.Core/Specification/ExpressionBuilder.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Compose
    path: Innovt.Domain.Core/Specification/ExpressionBuilder.cs
    startLine: 23
  assemblies:
  - Innovt.Domain.Core
  namespace: Innovt.Domain.Core.Specification
  summary: Compose two expressions and merge all in a new expression
  example: []
  syntax:
    content: public static Expression<T> Compose<T>(this Expression<T> first, Expression<T> second, Func<Expression, Expression, Expression> merge)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{{T}}
      description: Expression instance
    - id: second
      type: System.Linq.Expressions.Expression{{T}}
      description: Expression to merge
    - id: merge
      type: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
      description: Function to merge
    typeParameters:
    - id: T
      description: Type of params in expression
    return:
      type: System.Linq.Expressions.Expression{{T}}
      description: New merged expression
    content.vb: Public Shared Function Compose(Of T)(first As Expression(Of T), second As Expression(Of T), merge As Func(Of Expression, Expression, Expression)) As Expression(Of T)
  overload: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose*
  nameWithType.vb: ExpressionBuilder.Compose(Of T)(Expression(Of T), Expression(Of T), Func(Of Expression, Expression, Expression))
  fullName.vb: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose(Of T)(System.Linq.Expressions.Expression(Of T), System.Linq.Expressions.Expression(Of T), System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: Compose(Of T)(Expression(Of T), Expression(Of T), Func(Of Expression, Expression, Expression))
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Innovt.Domain.Core.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Innovt.Domain.Core.Specification.ExpressionBuilder
  langs:
  - csharp
  - vb
  name: And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  nameWithType: ExpressionBuilder.And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.And<T>(System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    remote:
      path: src/Innovt.Domain.Core/Specification/ExpressionBuilder.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: And
    path: Innovt.Domain.Core/Specification/ExpressionBuilder.cs
    startLine: 43
  assemblies:
  - Innovt.Domain.Core
  namespace: Innovt.Domain.Core.Specification
  summary: And operator
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Right Expression in AND operation
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Left Expression in And operation
    typeParameters:
    - id: T
      description: Type of params in expression
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: New AND expression
    content.vb: Public Shared Function [And](Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Innovt.Domain.Core.Specification.ExpressionBuilder.And*
  nameWithType.vb: ExpressionBuilder.And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName.vb: Innovt.Domain.Core.Specification.ExpressionBuilder.And(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Innovt.Domain.Core.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Innovt.Domain.Core.Specification.ExpressionBuilder
  langs:
  - csharp
  - vb
  name: Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  nameWithType: ExpressionBuilder.Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.Or<T>(System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    remote:
      path: src/Innovt.Domain.Core/Specification/ExpressionBuilder.cs
      branch: feature/ImproveDynamoMapping
      repo: https://github.com/Innovtt/Innovt.Platform.git
    id: Or
    path: Innovt.Domain.Core/Specification/ExpressionBuilder.cs
    startLine: 56
  assemblies:
  - Innovt.Domain.Core
  namespace: Innovt.Domain.Core.Specification
  summary: Or operator
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Right expression in OR operation
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Left expression in OR operation
    typeParameters:
    - id: T
      description: Type of param in expression
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: New Or expressions
    content.vb: Public Shared Function [Or](Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Innovt.Domain.Core.Specification.ExpressionBuilder.Or*
  nameWithType.vb: ExpressionBuilder.Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName.vb: Innovt.Domain.Core.Specification.ExpressionBuilder.Or(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
references:
- uid: Innovt.Domain.Core.Specification
  commentId: N:Innovt.Domain.Core.Specification
  href: Innovt.html
  name: Innovt.Domain.Core.Specification
  nameWithType: Innovt.Domain.Core.Specification
  fullName: Innovt.Domain.Core.Specification
  spec.csharp:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Specification
    name: Specification
    href: Innovt.Domain.Core.Specification.html
  spec.vb:
  - uid: Innovt
    name: Innovt
    href: Innovt.html
  - name: .
  - uid: Innovt.Domain
    name: Domain
    href: Innovt.Domain.html
  - name: .
  - uid: Innovt.Domain.Core
    name: Core
    href: Innovt.Domain.Core.html
  - name: .
  - uid: Innovt.Domain.Core.Specification
    name: Specification
    href: Innovt.Domain.Core.Specification.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose*
  commentId: Overload:Innovt.Domain.Core.Specification.ExpressionBuilder.Compose
  href: Innovt.Domain.Core.Specification.ExpressionBuilder.html#Innovt_Domain_Core_Specification_ExpressionBuilder_Compose__1_System_Linq_Expressions_Expression___0__System_Linq_Expressions_Expression___0__System_Func_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression__
  name: Compose
  nameWithType: ExpressionBuilder.Compose
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.Compose
- uid: System.Linq.Expressions.Expression{{T}}
  commentId: T:System.Linq.Expressions.Expression{``0}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<T>
  nameWithType: Expression<T>
  fullName: System.Linq.Expressions.Expression<T>
  nameWithType.vb: Expression(Of T)
  fullName.vb: System.Linq.Expressions.Expression(Of T)
  name.vb: Expression(Of T)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  commentId: T:System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Expression, Expression, Expression>
  nameWithType: Func<Expression, Expression, Expression>
  fullName: System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>
  nameWithType.vb: Func(Of Expression, Expression, Expression)
  fullName.vb: System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  name.vb: Func(Of Expression, Expression, Expression)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.And*
  commentId: Overload:Innovt.Domain.Core.Specification.ExpressionBuilder.And
  href: Innovt.Domain.Core.Specification.ExpressionBuilder.html#Innovt_Domain_Core_Specification_ExpressionBuilder_And__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  name: And
  nameWithType: ExpressionBuilder.And
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.And
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Innovt.Domain.Core.Specification.ExpressionBuilder.Or*
  commentId: Overload:Innovt.Domain.Core.Specification.ExpressionBuilder.Or
  href: Innovt.Domain.Core.Specification.ExpressionBuilder.html#Innovt_Domain_Core_Specification_ExpressionBuilder_Or__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  name: Or
  nameWithType: ExpressionBuilder.Or
  fullName: Innovt.Domain.Core.Specification.ExpressionBuilder.Or
